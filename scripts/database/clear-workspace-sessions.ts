#!/usr/bin/env tsx

/**
 * Script to clear all workspace data and terminal sessions from database
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• workspace ‡πÅ‡∏•‡∏∞ terminal sessions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */

import { prisma } from '@/core/database/prisma';

async function clearWorkspaceData() {
  console.log('üßπ Starting workspace and sessions cleanup...\n');

  try {
    // 1. ‡∏•‡∏ö Terminal Commands ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üìù Clearing terminal commands...');
    const deletedCommands = await prisma.terminalCommand.deleteMany({});
    console.log(`   ‚úÖ Deleted ${deletedCommands.count} terminal commands`);

    // 2. ‡∏•‡∏ö Terminal Sessions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üíª Clearing terminal sessions...');
    const deletedSessions = await prisma.terminalSession.deleteMany({});
    console.log(`   ‚úÖ Deleted ${deletedSessions.count} terminal sessions`);

    // 3. ‡∏•‡∏ö Projects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• workspace ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    console.log('üìÅ Clearing workspace projects...');
    const deletedProjects = await prisma.project.deleteMany({});
    console.log(`   ‚úÖ Deleted ${deletedProjects.count} projects`);

    // 4. File model ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô schema ‡πÅ‡∏•‡πâ‡∏ß - skip
    console.log('üìÑ File cleanup skipped (model not in schema)');

    // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('\nüìä Current Database Statistics:');
    
    const userCount = await prisma.user.count();
    const projectCount = await prisma.project.count();
    const sessionCount = await prisma.terminalSession.count();
    const commandCount = await prisma.terminalCommand.count();
    
    console.log(`   üë§ Users: ${userCount}`);
    console.log(`   üìÅ Projects: ${projectCount}`);
    console.log(`   üíª Terminal Sessions: ${sessionCount}`);
    console.log(`   üìù Terminal Commands: ${commandCount}`);

    console.log('\n‚ú® Workspace and sessions cleanup completed successfully!');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ active sessions ‡∏´‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const activeSessions = await prisma.terminalSession.findMany({
      where: { active: true }
    });
    
    if (activeSessions.length > 0) {
      console.log('\n‚ö†Ô∏è  Warning: Found active sessions after cleanup:');
      activeSessions.forEach(session => {
        console.log(`   - Session ID: ${session.id}, Type: ${session.type}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Error during cleanup:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
console.log('‚ö†Ô∏è  WARNING: This will delete ALL workspace data and terminal sessions!');
console.log('   This includes:');
console.log('   - All terminal sessions (active and inactive)');
console.log('   - All terminal command history');
console.log('   - All workspace projects');
console.log('   - All orphaned files\n');

// ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Are you sure you want to continue? (yes/no): ', async (answer) => {
  if (answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y') {
    await clearWorkspaceData();
  } else {
    console.log('‚ùå Cleanup cancelled by user');
  }
  rl.close();
  process.exit(0);
});