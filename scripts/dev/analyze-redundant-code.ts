#!/usr/bin/env tsx

/**
 * Analyze Redundant Code
 * วิเคราะห์ code ที่ซ้ำซ้อนและสามารถลบได้
 */

import * as fs from "fs";
import * as path from "path";
import chalk from "chalk";

interface FileAnalysis {
  path: string;
  size: number;
  category: "legacy" | "duplicate" | "unused" | "keep";
  reason: string;
  canDelete: boolean;
}

const analyses: FileAnalysis[] = [];

// Services ที่ซ้ำซ้อน
const redundantServices = [
  {
    pattern: /terminal-session\.service/,
    files: [
      "src/services/terminal-session.service.ts",
      "src/services/terminal-pool.service.ts",
      "src/services/terminal-registry.service.ts",
      "src/services/terminal-state.service.ts",
      "src/services/terminal-sync.service.ts",
      "src/services/terminal-queue.service.ts",
      "src/services/terminal-focus.service.ts",
    ],
    reason: "ถูกแทนที่ด้วย SessionManager ใน terminal-v2",
  },
  {
    pattern: /terminal-ws.*\.js$/,
    files: [
      "src/server/websocket/terminal-ws-exec.js",
      "src/server/websocket/terminal-ws-fallback.js",
      "src/server/websocket/terminal-ws-simple.js",
      "src/server/websocket/terminal-ws-stream.js",
      "src/server/websocket/terminal-ws-upgrade.js",
    ],
    reason: "WebSocket handlers เก่าที่ไม่ใช้แล้ว",
  },
];

// Components เก่า
const oldComponents = [
  "src/modules/workspace/components/Terminal/TerminalContainer.tsx",
  "src/modules/workspace/components/Terminal/TerminalContainerV2.tsx",
  "src/modules/workspace/components/Terminal/XTermView.tsx",
];

// Backup files
const backupFiles = ["src/backup/terminal-v1", "src/backup/terminal-backup"];

function analyzeFile(filePath: string): FileAnalysis | null {
  const fullPath = path.join(process.cwd(), filePath);

  if (!fs.existsSync(fullPath)) {
    return null;
  }

  const stats = fs.statSync(fullPath);

  if (stats.isDirectory()) {
    // Analyze directory
    const files = fs.readdirSync(fullPath, { recursive: true }) as string[];
    let totalSize = 0;

    for (const file of files) {
      const fileStat = fs.statSync(path.join(fullPath, file));
      if (fileStat.isFile()) {
        totalSize += fileStat.size;
      }
    }

    return {
      path: filePath,
      size: totalSize,
      category: "legacy",
      reason: "Backup directory",
      canDelete: true,
    };
  }

  return {
    path: filePath,
    size: stats.size,
    category: "legacy",
    reason: "Old implementation",
    canDelete: true,
  };
}

function main() {
  console.log(chalk.bold.cyan("\n🔍 Analyzing Redundant Code\n"));

  // Analyze redundant services
  console.log(chalk.yellow("Redundant Services:"));
  for (const group of redundantServices) {
    for (const file of group.files) {
      const analysis = analyzeFile(file);
      if (analysis) {
        analyses.push({ ...analysis, reason: group.reason });
        console.log(
          `  ${chalk.red("✗")} ${file} (${formatSize(analysis.size)}) - ${group.reason}`,
        );
      }
    }
  }

  console.log();

  // Analyze old components
  console.log(chalk.yellow("Old Components:"));
  for (const file of oldComponents) {
    const analysis = analyzeFile(file);
    if (analysis) {
      analyses.push({
        ...analysis,
        category: "duplicate",
        reason: "Replaced by V3/V4",
      });
      console.log(
        `  ${chalk.red("✗")} ${file} (${formatSize(analysis.size)}) - Replaced by newer version`,
      );
    }
  }

  console.log();

  // Analyze backup files
  console.log(chalk.yellow("Backup Files:"));
  for (const file of backupFiles) {
    const analysis = analyzeFile(file);
    if (analysis) {
      analyses.push(analysis);
      console.log(
        `  ${chalk.red("✗")} ${file} (${formatSize(analysis.size)}) - Backup directory`,
      );
    }
  }

  console.log();

  // Summary
  const totalSize = analyses.reduce((sum, a) => sum + a.size, 0);
  const deletableFiles = analyses.filter((a) => a.canDelete);
  const deletableSize = deletableFiles.reduce((sum, a) => sum + a.size, 0);

  console.log(chalk.bold.cyan("\n📊 Summary\n"));
  console.log(`Total redundant files: ${analyses.length}`);
  console.log(`Total size: ${formatSize(totalSize)}`);
  console.log(
    `Can delete: ${deletableFiles.length} files (${formatSize(deletableSize)})`,
  );

  // Generate cleanup script
  if (deletableFiles.length > 0) {
    const scriptPath = path.join(
      process.cwd(),
      "scripts",
      "cleanup-redundant-code.sh",
    );
    const script = [
      "#!/bin/bash",
      "",
      "# Cleanup Redundant Code",
      "# Generated by analyze-redundant-code.ts",
      "",
      'echo "🧹 Cleaning up redundant code..."',
      "",
      ...deletableFiles.map((f) => `rm -rf "${f.path}"`),
      "",
      'echo "✅ Cleanup complete!"',
    ].join("\n");

    fs.writeFileSync(scriptPath, script);
    fs.chmodSync(scriptPath, "755");

    console.log(
      `\n${chalk.green("✓")} Cleanup script generated: ${chalk.cyan("scripts/cleanup-redundant-code.sh")}`,
    );
    console.log(
      `  Run: ${chalk.yellow("./scripts/cleanup-redundant-code.sh")}`,
    );
  }

  // Recommendations
  console.log(chalk.bold.cyan("\n💡 Recommendations\n"));
  console.log("1. Review the cleanup script before running");
  console.log("2. Make sure to commit current changes first");
  console.log("3. Test the application after cleanup");
  console.log(
    "4. Consider keeping backups for 1-2 weeks before permanent deletion",
  );
}

function formatSize(bytes: number): string {
  if (bytes < 1024) return `${bytes}B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}KB`;
  return `${(bytes / (1024 * 1024)).toFixed(1)}MB`;
}

main();
