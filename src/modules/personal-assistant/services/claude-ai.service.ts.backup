import { spawn, ChildProcess } from 'child_process';
import { EventEmitter } from 'events';
import { ClaudeRealtimeService } from './claude-realtime.service';

export interface ClaudeConfig {
  apiKey?: string;
  model?: string;
  maxTokens?: number;
  temperature?: number;
  command?: string; // Claude CLI command
  useRealtime?: boolean; // Use realtime background Claude
}

export interface ClaudeMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface ClaudeResponse {
  content: string;
  usage?: {
    input_tokens: number;
    output_tokens: number;
  };
  model?: string;
  error?: string;
}

export class ClaudeAIService extends EventEmitter {
  private config: ClaudeConfig;
  private claudeProcess: ChildProcess | null = null;
  private isReady = false;
  private realtimeService?: ClaudeRealtimeService;
  private sessionId: string;
  private messageQueue: Array<{
    message: string;
    resolve: (value: ClaudeResponse) => void;
    reject: (error: any) => void;
  }> = [];

  constructor(config: ClaudeConfig = {}) {
    super();
    this.config = {
      apiKey: config.apiKey || process.env.CLAUDE_API_KEY,
      model: config.model || 'claude-3-sonnet',
      maxTokens: config.maxTokens || 4000,
      temperature: config.temperature || 0.7,
      command: config.command || 'claude',
      useRealtime: config.useRealtime || process.env.CLAUDE_REALTIME === 'true'
    };
    
    this.sessionId = `session_${Date.now()}`;
    
    // Initialize realtime service if enabled
    if (this.config.useRealtime) {
      this.realtimeService = ClaudeRealtimeService.getInstance();
    }
  }

  async initialize(): Promise<void> {
    // Try to initialize realtime service first
    if (this.config.useRealtime && this.realtimeService) {
      try {
        await this.realtimeService.initialize();
        console.log('‚úÖ Claude AI Service initialized with realtime background process');
        this.isReady = true;
        return;
      } catch (error) {
        console.warn('Failed to initialize realtime service, falling back to API mode:', error);
        this.config.useRealtime = false;
      }
    }

    // Fallback to API/CLI mode
    console.log('Claude AI Service initialized in API/fallback mode');
    this.isReady = true;
    return Promise.resolve();
  }

  private startClaudeProcess(): void {
    try {
      // Start Claude in interactive mode
      this.claudeProcess = spawn('claude', ['chat'], {
        env: {
          ...process.env,
          CLAUDE_API_KEY: this.config.apiKey
        }
      });

      this.claudeProcess.stdout?.on('data', (data) => {
        const output = data.toString();
        this.handleClaudeOutput(output);
      });

      this.claudeProcess.stderr?.on('data', (data) => {
        console.error('Claude error:', data.toString());
      });

      this.claudeProcess.on('close', (code) => {
        console.log(`Claude process exited with code ${code}`);
        this.isReady = false;
        this.claudeProcess = null;
        
        // Restart if needed
        if (this.messageQueue.length > 0) {
          this.startClaudeProcess();
        }
      });

      this.isReady = true;
      this.emit('ready');
    } catch (error) {
      console.error('Failed to start Claude process:', error);
      this.isReady = true; // Fall back to API mode
    }
  }

  private handleClaudeOutput(output: string): void {
    if (this.messageQueue.length > 0) {
      const { resolve } = this.messageQueue.shift()!;
      resolve({
        content: output.trim(),
        model: 'claude-cli'
      });
    }
  }

  async sendMessage(message: string, context?: ClaudeMessage[]): Promise<ClaudeResponse> {
    console.log('Processing message:', message);
    
    // Always try Claude Direct Only Service - no fallbacks
    try {
      const { ClaudeDirectOnlyService } = await import('@/services/claude-direct-only.service');
      const claude = ClaudeDirectOnlyService.getInstance();
      
      console.log('[Claude] Sending to Claude directly...');
      const response = await claude.sendToClaude(message);
      
      console.log('[Claude] Response received');
      return {
        content: response,
        model: 'claude-cli'
      };
    } catch (error) {
      console.error('[Claude] Error:', error);
      // Return error message, not fallback
      return {
        content: `Claude error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        model: 'error'
      };
    }
  }
  
  private async generateEnhancedLocalResponse(message: string, context?: ClaudeMessage[]): Promise<ClaudeResponse> {
    const lowerMessage = message.toLowerCase();
    
    // Thai language responses
    if (message.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || message.includes('‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ')) {
      return {
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°?',
        model: 'local-enhanced'
      };
    }
    
    if (message.includes('‡∏≠‡∏≤‡∏Å‡∏≤‡∏®') || message.includes('‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ')) {
      return {
        content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö real-time ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å:\n- Google Weather\n- ‡πÅ‡∏≠‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠\n- weather.com\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üòä',
        model: 'local-enhanced'
      };
    }
    
    if (message.includes('‡∏ä‡∏∑‡πà‡∏≠') || message.includes('‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠')) {
      return {
        content: '‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Personal AI Assistant ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (Tasks)\n- ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Reminders)\n- ‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (Notes)\n- ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n- ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î\n\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡∏ö',
        model: 'local-enhanced'
      };
    }
    
    // More specific responses
    if (message.includes('testdemo.md') || message.includes('‡πÑ‡∏ü‡∏•‡πå')) {
      return {
        content: '‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n\nüìÑ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå:**\n- `note create testdemo.md` - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå note\n- `note list` - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå note\n- `note search [keyword]` - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô notes\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå testdemo.md ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå:\n`note create testdemo content here`',
        model: 'local-enhanced'
      };
    }
    
    if (message.includes('‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á') || message.includes('‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á')) {
      return {
        content: '‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢:\n\nü§î **‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**\n- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î? - ‡∏ö‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡∏∞ requirements\n- ‡πÅ‡∏Å‡πâ bug? - ‡πÅ‡∏ä‡∏£‡πå error message\n- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô? - ‡πÉ‡∏ä‡πâ `task add [‡∏á‡∏≤‡∏ô]`\n- ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô? - ‡πÉ‡∏ä‡πâ `reminder set [‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á] at [‡πÄ‡∏ß‡∏•‡∏≤]`\n- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ? - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Python ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì fibonacci"',
        model: 'local-enhanced'
      };
    }
    
    // Coding questions
    if (lowerMessage.includes('code') || lowerMessage.includes('‡πÇ‡∏Ñ‡πâ‡∏î')) {
      return {
        content: '‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ö‡∏≠‡∏Å‡∏ú‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏ä‡πà‡∏ô:\n- ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£ (Python, JavaScript, TypeScript, etc.)\n- ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ (function, class, algorithm)\n- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Python function ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì fibonacci"',
        model: 'local-enhanced'
      };
    }
    
    // General conversation
    if (message.includes('‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ') || lowerMessage.includes('help')) {
      return {
        content: '‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö:\n\nüìã **Task Management**\n- `task add [title]` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n- `task list` - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n- `task complete [id]` - ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à\n\n‚è∞ **Reminders**\n- `reminder set [title] at [time]` - ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n- `reminder list` - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n\nüìù **Notes**\n- `note create [content]` - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ô‡πâ‡∏ï\n- `note list` - ‡∏î‡∏π‡πÇ‡∏ô‡πâ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\nüí¨ **General Chat**\n- ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n- ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ coding\n- ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        model: 'local-enhanced'
      };
    }
    
    // Default response
    return {
      content: `‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß: "${message}"\n\n‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`,
      model: 'local-enhanced'
    };
  }

  private sendToCLI(message: string): Promise<ClaudeResponse> {
    return new Promise((resolve, reject) => {
      if (!this.claudeProcess) {
        reject(new Error('Claude process not running'));
        return;
      }

      this.messageQueue.push({ message, resolve, reject });
      this.claudeProcess.stdin?.write(message + '\n');
    });
  }

  private async sendToAPI(message: string, context?: ClaudeMessage[]): Promise<ClaudeResponse> {
    try {
      // If no API key, return a helpful response
      if (!this.config.apiKey) {
        return {
          content: this.generateLocalResponse(message),
          model: 'local-nlp'
        };
      }

      // Call Claude API
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.config.apiKey,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: this.config.model,
          max_tokens: this.config.maxTokens,
          temperature: this.config.temperature,
          messages: [
            ...(context || []),
            { role: 'user', content: message }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.statusText}`);
      }

      const data = await response.json();
      
      return {
        content: data.content[0].text,
        usage: data.usage,
        model: data.model
      };
    } catch (error) {
      console.error('Claude API error:', error);
      
      // Fallback to local NLP
      return {
        content: this.generateLocalResponse(message),
        model: 'local-nlp',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private generateLocalResponse(message: string): string {
    // Enhanced local NLP fallback
    const lowerMessage = message.toLowerCase();
    
    // Code-related responses
    if (lowerMessage.includes('code') || lowerMessage.includes('function') || lowerMessage.includes('implement')) {
      return '‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î offline ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
    }
    
    // Debug/fix related
    if (lowerMessage.includes('debug') || lowerMessage.includes('fix') || lowerMessage.includes('error')) {
      return '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå error message ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡πâ';
    }
    
    // Explain related
    if (lowerMessage.includes('explain') || lowerMessage.includes('what is') || lowerMessage.includes('how')) {
      return '‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ';
    }
    
    // Default technical response
    return '‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô AI Assistant ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô coding, debugging ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î';
  }

  async analyzeCode(code: string, language: string = 'typescript'): Promise<ClaudeResponse> {
    const prompt = `Analyze this ${language} code and provide suggestions for improvements:\n\n\`\`\`${language}\n${code}\n\`\`\``;
    return this.sendMessage(prompt);
  }

  async generateCode(requirements: string, language: string = 'typescript'): Promise<ClaudeResponse> {
    const prompt = `Generate ${language} code for the following requirements:\n${requirements}`;
    return this.sendMessage(prompt);
  }

  async explainCode(code: string, language: string = 'typescript'): Promise<ClaudeResponse> {
    const prompt = `Explain this ${language} code in detail:\n\n\`\`\`${language}\n${code}\n\`\`\``;
    return this.sendMessage(prompt);
  }

  async debugCode(code: string, error: string, language: string = 'typescript'): Promise<ClaudeResponse> {
    const prompt = `Debug this ${language} code that produces the following error:\n\nError: ${error}\n\nCode:\n\`\`\`${language}\n${code}\n\`\`\``;
    return this.sendMessage(prompt);
  }

  terminate(): void {
    // Stop realtime service if running
    if (this.realtimeService) {
      this.realtimeService.stop();
    }
    
    if (this.claudeProcess) {
      this.claudeProcess.kill();
      this.claudeProcess = null;
    }
    this.isReady = false;
  }
}