import { Command, AssistantContext, AssistantResponse } from '../types';
import { ClaudeAIService } from '../services/claude-ai.service';

const claudeAI = ClaudeAIService.getInstance();
// Initialize once on module load
claudeAI.initialize().catch(console.error);

export const aiCodeCommand: Command = {
  name: 'ai.code',
  description: 'Generate code with AI assistance',
  aliases: ['code', 'generate'],
  parameters: [
    {
      name: 'requirements',
      type: 'string',
      required: true,
      description: 'Code requirements or description'
    }
  ],
  handler: async (context: AssistantContext, args: Record<string, any>): Promise<AssistantResponse> => {
    const { requirements } = args;
    
    if (!requirements) {
      return {
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `code function to validate email`',
        suggestions: [
          'code React component for login form',
          'code API endpoint for user authentication',
          'code utility function for date formatting'
        ]
      };
    }

    try {
      const response = await claudeAI.generateCode(requirements);
      
      return {
        message: `ü§ñ **AI Generated Code:**\n\n${response.content}`,
        suggestions: [
          'ai explain - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ',
          'ai improve - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î',
          'task add - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô'
        ],
        data: { 
          source: 'claude-ai', 
          model: response.model,
          code: response.content 
        }
      };
    } catch (error) {
      return {
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        suggestions: ['help', 'code simple function']
      };
    }
  }
};

export const aiExplainCommand: Command = {
  name: 'ai.explain',
  description: 'Explain code or concept with AI',
  aliases: ['explain', 'what'],
  parameters: [
    {
      name: 'content',
      type: 'string',
      required: true,
      description: 'Code or concept to explain'
    }
  ],
  handler: async (context: AssistantContext, args: Record<string, any>): Promise<AssistantResponse> => {
    const { content } = args;
    
    if (!content) {
      return {
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
        suggestions: [
          'explain async/await in JavaScript',
          'explain React hooks',
          'explain REST API'
        ]
      };
    }

    try {
      const response = await claudeAI.explainCode(content);
      
      return {
        message: `üìö **AI Explanation:**\n\n${response.content}`,
        suggestions: [
          'ai code - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          'note create - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
          'ai debug - ‡∏ä‡πà‡∏ß‡∏¢ debug'
        ],
        data: { 
          source: 'claude-ai',
          model: response.model,
          explanation: response.content 
        }
      };
    } catch (error) {
      return {
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        suggestions: ['help', 'explain simple concept']
      };
    }
  }
};

export const aiDebugCommand: Command = {
  name: 'ai.debug',
  description: 'Debug code with AI assistance',
  aliases: ['debug', 'fix'],
  parameters: [
    {
      name: 'problem',
      type: 'string',
      required: true,
      description: 'Code and error description'
    }
  ],
  handler: async (context: AssistantContext, args: Record<string, any>): Promise<AssistantResponse> => {
    const { problem } = args;
    
    if (!problem) {
      return {
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö',
        suggestions: [
          'debug TypeError: Cannot read property',
          'fix undefined is not a function',
          'debug async await not working'
        ]
      };
    }

    try {
      // Extract code and error from problem description
      const parts = problem.split('error:');
      const code = parts[0] || problem;
      const error = parts[1] || 'Unknown error';
      
      const response = await claudeAI.debugCode(code, error);
      
      return {
        message: `üîß **AI Debug Solution:**\n\n${response.content}`,
        suggestions: [
          'ai explain - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
          'task add - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥',
          'note create - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'
        ],
        data: { 
          source: 'claude-ai',
          model: response.model,
          solution: response.content 
        }
      };
    } catch (error) {
      return {
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        suggestions: ['help', 'debug with more details']
      };
    }
  }
};

export const aiAnalyzeCommand: Command = {
  name: 'ai.analyze',
  description: 'Analyze code quality and suggest improvements',
  aliases: ['analyze', 'review'],
  parameters: [
    {
      name: 'code',
      type: 'string',
      required: true,
      description: 'Code to analyze'
    }
  ],
  handler: async (context: AssistantContext, args: Record<string, any>): Promise<AssistantResponse> => {
    const { code } = args;
    
    if (!code) {
      return {
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
        suggestions: [
          'analyze function code',
          'review React component',
          'analyze API endpoint'
        ]
      };
    }

    try {
      const response = await claudeAI.analyzeCode(code);
      
      return {
        message: `üîç **AI Code Analysis:**\n\n${response.content}`,
        suggestions: [
          'ai improve - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
          'task add - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á',
          'note create - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞'
        ],
        data: { 
          source: 'claude-ai',
          model: response.model,
          analysis: response.content 
        }
      };
    } catch (error) {
      return {
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        suggestions: ['help', 'analyze simpler code']
      };
    }
  }
};

export const aiChatCommand: Command = {
  name: 'ai.chat',
  description: 'Chat directly with Claude AI',
  aliases: ['ai', 'claude', 'ask'],
  parameters: [
    {
      name: 'message',
      type: 'string',
      required: true,
      description: 'Message to Claude'
    }
  ],
  handler: async (context: AssistantContext, args: Record<string, any>): Promise<AssistantResponse> => {
    const { message } = args;
    
    if (!message) {
      return {
        message: 'üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Claude AI\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `ai ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ Claude`',
        suggestions: [
          'ai how to learn TypeScript',
          'ai explain React vs Vue',
          'ai best practices for API design'
        ]
      };
    }

    try {
      const response = await claudeAI.sendMessage(message);
      
      return {
        message: `ü§ñ **Claude AI:**\n\n${response.content}`,
        suggestions: [
          'ai follow up question',
          'note create - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö',
          'task add - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô'
        ],
        data: { 
          source: 'claude-ai',
          model: response.model,
          response: response.content 
        }
      };
    } catch (error) {
      return {
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Claude AI ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        suggestions: ['help', 'ai status']
      };
    }
  }
};