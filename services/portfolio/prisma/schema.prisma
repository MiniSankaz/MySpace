generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Portfolio {
  id           String              @id @default(uuid())
  userId       String
  name         String
  description  String?
  currency     String              @default("USD")
  isDefault    Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  holdings     Holding[]
  snapshots    PortfolioSnapshot[]
  transactions Transaction[]
  watchlists   Watchlist[]

  @@index([userId])
  @@map("portfolios")
}

model Holding {
  id           String        @id @default(uuid())
  portfolioId  String
  symbol       String
  quantity     Decimal
  averagePrice Decimal
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  portfolio    Portfolio     @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([portfolioId, symbol])
  @@index([portfolioId])
  @@index([symbol])
  @@map("holdings")
}

model Transaction {
  id          String          @id @default(uuid())
  portfolioId String
  holdingId   String?
  type        TransactionType
  symbol      String
  quantity    Decimal
  price       Decimal
  fees        Decimal         @default(0)
  total       Decimal
  notes       String?
  executedAt  DateTime        @default(now())
  createdAt   DateTime        @default(now())
  holding     Holding?        @relation(fields: [holdingId], references: [id])
  portfolio   Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([symbol])
  @@index([executedAt])
  @@map("transactions")
}

model Stock {
  id           String       @id @default(uuid())
  symbol       String       @unique
  name         String
  exchange     String?
  sector       String?
  industry     String?
  marketCap    Decimal?
  description  String?
  website      String?
  lastUpdated  DateTime     @default(now())
  priceHistory StockPrice[]

  @@index([symbol])
  @@map("stocks")
}

model StockPrice {
  id            String   @id @default(uuid())
  stockId       String
  symbol        String
  price         Decimal
  open          Decimal?
  high          Decimal?
  low           Decimal?
  close         Decimal?
  volume        BigInt?
  change        Decimal?
  changePercent Decimal?
  timestamp     DateTime @default(now())
  stock         Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([stockId])
  @@index([symbol])
  @@index([timestamp])
  @@map("stock_prices")
}

model Watchlist {
  id          String    @id @default(uuid())
  portfolioId String
  userId      String
  name        String
  symbols     String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([userId])
  @@map("watchlists")
}

model PortfolioSnapshot {
  id                 String    @id @default(uuid())
  portfolioId        String
  totalValue         Decimal
  totalCost          Decimal
  dayChange          Decimal
  dayChangePercent   Decimal
  totalReturn        Decimal
  totalReturnPercent Decimal
  timestamp          DateTime  @default(now())
  portfolio          Portfolio @relation(fields: [portfolioId], references: [id])

  @@index([portfolioId])
  @@index([timestamp])
  @@map("portfolio_snapshots")
}

enum TransactionType {
  BUY
  SELL
  DIVIDEND
  SPLIT
  TRANSFER_IN
  TRANSFER_OUT
}
