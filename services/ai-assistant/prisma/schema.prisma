generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                          @id @default(cuid())
  email                              String                          @unique
  username                           String                          @unique
  passwordHash                       String
  firstName                          String?
  lastName                           String?
  displayName                        String?
  avatar                             String?
  bio                                String?
  phone                              String?
  isActive                           Boolean                         @default(true)
  emailVerified                      DateTime?
  phoneVerified                      DateTime?
  mfaEnabled                         Boolean                         @default(false)
  mfaSecret                          String?
  failedLoginAttempts                Int                             @default(0)
  lastLoginAt                        DateTime?
  lastLoginIp                        String?
  accountLockedUntil                 DateTime?
  passwordChangedAt                  DateTime                        @default(now())
  mustChangePassword                 Boolean                         @default(false)
  createdAt                          DateTime                        @default(now())
  updatedAt                          DateTime                        @updatedAt
  createdBy                          String?
  updatedBy                          String?
  deletedAt                          DateTime?
  deletedBy                          String?
  version                            Int                             @default(1)
  ApiToken                           ApiToken[]
  ApiUsageLog                        ApiUsageLog[]
  ApiWebhook                         ApiWebhook[]
  AssistantAnalytics                 AssistantAnalytics[]
  AssistantNote                      AssistantNote[]
  AssistantReminder                  AssistantReminder[]
  AssistantTask                      AssistantTask[]
  AuditLog                           AuditLog[]
  BackupExport                       BackupExport[]
  BackupSchedule                     BackupSchedule[]
  ChatConversation                   ChatConversation[]
  Department                         Department[]
  EmailCampaign                      EmailCampaign[]
  Form                               Form[]
  FormSubmission                     FormSubmission[]
  GitConfigHistory                   GitConfigHistory[]
  KBAttachment                       KBAttachment[]
  KBIssue_KBIssue_assignedToTousers  KBIssue[]                       @relation("KBIssue_assignedToTousers")
  KBIssue_KBIssue_createdByTousers   KBIssue[]                       @relation("KBIssue_createdByTousers")
  KBIssueRelation                    KBIssueRelation[]
  KBSolution                         KBSolution[]
  KBSolutionFeedback                 KBSolutionFeedback[]
  LoginHistory                       LoginHistory[]
  Media                              Media[]
  MenuItem_MenuItem_createdByTousers MenuItem[]                      @relation("MenuItem_createdByTousers")
  MenuItem_MenuItem_deletedByTousers MenuItem[]                      @relation("MenuItem_deletedByTousers")
  MenuItem_MenuItem_updatedByTousers MenuItem[]                      @relation("MenuItem_updatedByTousers")
  Page_Page_authorIdTousers          Page[]                          @relation("Page_authorIdTousers")
  Page_Page_createdByTousers         Page[]                          @relation("Page_createdByTousers")
  PasswordReset                      PasswordReset[]
  Portfolio                          Portfolio[]
  Post                               Post[]
  ProjectPreferences                 ProjectPreferences[]
  Session                            Session[]
  Survey                             Survey[]
  Tag                                Tag[]
  Team                               Team[]
  TeamMember                         TeamMember[]
  TerminalAnalytics                  TerminalAnalytics[]
  TerminalLog                        TerminalLog[]
  TerminalSOP                        TerminalSOP[]
  TerminalSession                    TerminalSession[]
  TerminalShortcut                   TerminalShortcut[]
  ThemeConfig                        ThemeConfig[]
  UserActivity                       UserActivity[]
  UserApiKey                         UserApiKey[]
  UserConfig                         UserConfig[]
  UserDepartment                     UserDepartment[]
  UserDevice                         UserDevice[]
  UserInvitation                     UserInvitation[]
  UserNotification                   UserNotification[]
  UserPreference                     UserPreference[]
  UserProfile                        UserProfile?
  UserRole                           UserRole[]
  UserSidebarSettings                UserSidebarSettings?
  Watchlist                          Watchlist[]
  WorkspaceTerminalCommand           WorkspaceTerminalCommand[]
  WorkspaceTerminalLog               WorkspaceTerminalLog[]
  WorkspaceTerminalSession           WorkspaceTerminalSession[]
  assistant_conversation_legacy      assistant_conversation_legacy[]
  chatFolders                        ChatFolder[]
  chat_messages                      ChatMessage[]
  chatSessions                       ChatSession[]
  users_users_createdByTousers       User?                           @relation("users_createdByTousers", fields: [createdBy], references: [id], map: "User_createdBy_fkey")
  other_users_users_createdByTousers User[]                          @relation("users_createdByTousers")
  users_users_deletedByTousers       User?                           @relation("users_deletedByTousers", fields: [deletedBy], references: [id], map: "User_deletedBy_fkey")
  other_users_users_deletedByTousers User[]                          @relation("users_deletedByTousers")
  users_users_updatedByTousers       User?                           @relation("users_updatedByTousers", fields: [updatedBy], references: [id], map: "User_updatedBy_fkey")
  other_users_users_updatedByTousers User[]                          @relation("users_updatedByTousers")

  @@index([createdAt], map: "users_createdat_idx")
  @@index([email])
  @@index([isActive, deletedAt], map: "users_isactive_deletedat_idx")
  @@index([username])
  @@map("users")
}

model ChatFolder {
  id                            String                          @id @default(cuid())
  userId                        String
  name                          String
  color                         String?                         @default("#3B82F6")
  icon                          String?                         @default("folder")
  order                         Int                             @default(0)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  description                   String?
  isDefault                     Boolean?                        @default(false)
  sessionCount                  Int?                            @default(0)
  assistant_conversation_legacy assistant_conversation_legacy[]
  user                          User                            @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AssistantFolder_userId_fkey")

  @@unique([userId, name], map: "chat_folders_userid_name_key")
  @@index([userId], map: "chat_folders_userid_idx")
  @@map("chat_folders")
}

model ChatSession {
  id                 String               @id @default(cuid())
  userId             String
  projectId          String?
  sessionName        String?
  model              String
  temperature        Float                @default(0.7)
  maxTokens          Int                  @default(4096)
  totalTokensUsed    Int                  @default(0)
  totalCost          Float                @default(0)
  metadata           Json?
  startedAt          DateTime             @default(now())
  lastActiveAt       DateTime
  endedAt            DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String?              @default("Untitled Session")
  isActive           Boolean?             @default(true)
  folderId           String?
  AssistantAnalytics AssistantAnalytics[]
  AssistantCommand   AssistantCommand[]
  AssistantFile      AssistantFile[]
  messages           ChatMessage[]
  Project            Project?             @relation(fields: [projectId], references: [id], map: "AssistantChatSession_projectId_fkey")
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AssistantChatSession_userId_fkey")

  @@index([lastActiveAt], map: "chat_sessions_lastactiveat_idx")
  @@index([projectId], map: "chat_sessions_projectid_idx")
  @@index([userId], map: "chat_sessions_userid_idx")
  @@map("chat_sessions")
}

model ChatMessage {
  id         String      @id @default(cuid())
  sessionId  String
  userId     String?
  projectId  String?
  role       String
  content    String
  model      String?
  tokensUsed Int?
  cost       Float?
  latency    Int?
  metadata   Json?
  timestamp  DateTime    @default(now())
  Project    Project?    @relation(fields: [projectId], references: [id], map: "AssistantChatMessage_projectId_fkey")
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, map: "AssistantChatMessage_sessionId_fkey")
  users      User?       @relation(fields: [userId], references: [id], map: "AssistantChatMessage_userId_fkey")

  @@index([projectId], map: "chat_messages_projectid_idx")
  @@index([role])
  @@index([sessionId, timestamp], map: "chat_messages_sessionid_timestamp_idx")
  @@index([userId], map: "chat_messages_userid_idx")
  @@map("chat_messages")
}

model ApiRateLimit {
  id           String   @id
  tokenId      String   @unique
  windowStart  DateTime
  requestCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([tokenId])
  @@index([windowStart])
}

model ApiToken {
  id            String        @id
  userId        String
  name          String
  token         String        @unique
  tokenPrefix   String
  scopes        String[]
  expiresAt     DateTime?
  lastUsedAt    DateTime?
  lastUsedIp    String?
  usageCount    Int           @default(0)
  rateLimit     Int           @default(1000)
  isActive      Boolean       @default(true)
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  revokedAt     DateTime?
  revokedReason String?
  users         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ApiUsageLog   ApiUsageLog[]

  @@index([expiresAt])
  @@index([isActive])
  @@index([token])
  @@index([userId])
}

model ApiUsageLog {
  id           String   @id
  tokenId      String
  userId       String
  endpoint     String
  method       String
  statusCode   Int
  requestBody  Json?
  responseBody Json?
  responseTime Int
  ipAddress    String
  userAgent    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime @default(now())
  ApiToken     ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([endpoint])
  @@index([statusCode])
  @@index([tokenId])
  @@index([userId])
}

model ApiWebhook {
  id              String    @id
  userId          String
  name            String
  url             String
  events          String[]
  secret          String
  isActive        Boolean   @default(true)
  failureCount    Int       @default(0)
  lastTriggeredAt DateTime?
  lastStatus      Int?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  users           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([userId])
}

model AssistantAnalytics {
  id            String       @id
  sessionId     String?
  userId        String
  projectId     String?
  date          DateTime     @db.Date
  messagesCount Int          @default(0)
  tokensUsed    Int          @default(0)
  totalCost     Float        @default(0)
  commandsCount Int          @default(0)
  filesModified Int          @default(0)
  errorsCount   Int          @default(0)
  avgLatency    Float?
  metadata      Json?
  createdAt     DateTime     @default(now())
  Project       Project?     @relation(fields: [projectId], references: [id])
  chat_sessions ChatSession? @relation(fields: [sessionId], references: [id])
  users         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, date])
  @@index([date])
  @@index([projectId])
  @@index([userId])
}

model AssistantCommand {
  id            String      @id
  sessionId     String
  messageId     String?
  projectId     String?
  command       String
  type          String
  status        String
  output        String?
  error         String?
  executedAt    DateTime?
  executedBy    String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  Project       Project?    @relation(fields: [projectId], references: [id])
  chat_sessions ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sessionId])
  @@index([status])
  @@index([type])
}

model AssistantFile {
  id            String      @id
  sessionId     String
  projectId     String?
  filePath      String
  action        String
  content       String?
  diff          String?
  metadata      Json?
  timestamp     DateTime    @default(now())
  Project       Project?    @relation(fields: [projectId], references: [id])
  chat_sessions ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([projectId])
  @@index([sessionId])
  @@index([timestamp])
}

model AssistantNote {
  id        String   @id
  userId    String
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
}

model AssistantReminder {
  id            String    @id
  userId        String
  title         String
  description   String?
  time          DateTime
  recurring     Json?
  enabled       Boolean   @default(true)
  lastTriggered DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  users         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([enabled])
  @@index([time])
  @@index([userId])
}

model AssistantTask {
  id          String    @id
  userId      String
  title       String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([dueDate])
  @@index([status])
  @@index([userId])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  severity   String   @default("info")
  createdAt  DateTime @default(now())
  users      User?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([resource])
  @@index([userId])
}

model BackupExport {
  id             String    @id
  name           String
  type           String
  format         String
  status         String    @default("pending")
  filters        Json?
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  recordCount    Int?
  compression    Boolean   @default(false)
  encrypted      Boolean   @default(false)
  progress       Int       @default(0)
  error          String?
  metadata       Json?
  expiresAt      DateTime?
  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  completedAt    DateTime?
  users          User      @relation(fields: [createdBy], references: [id])

  @@index([createdAt])
  @@index([createdBy])
  @@index([expiresAt])
  @@index([status])
  @@index([type])
}

model BackupSchedule {
  id          String    @id
  name        String
  type        String
  frequency   String
  cronPattern String?
  isActive    Boolean   @default(true)
  filters     Json?
  settings    Json?
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  runCount    Int       @default(0)
  failCount   Int       @default(0)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       User      @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([isActive])
  @@index([nextRunAt])
}

model Category {
  id             String     @id
  name           String
  slug           String     @unique
  description    String?
  parentId       String?
  order          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  Gallery        Gallery[]
  Post           Post[]

  @@index([parentId])
  @@index([slug])
}

model ChatConversation {
  id           String               @id
  visitorId    String
  visitorName  String?
  visitorEmail String?
  visitorPhone String?
  status       String               @default("active")
  rating       Int?
  startedAt    DateTime             @default(now())
  endedAt      DateTime?
  metadata     Json?
  agentId      String?
  users        User?                @relation(fields: [agentId], references: [id])
  ChatMessage  public_ChatMessage[]

  @@index([agentId])
  @@index([startedAt])
  @@index([status])
  @@index([visitorId])
}

model public_ChatMessage {
  id               String           @id
  conversationId   String
  senderId         String
  senderType       String
  message          String
  attachments      Json?
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())
  ChatConversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@map("ChatMessage")
}

model ChatSettings {
  id             String   @id
  isEnabled      Boolean  @default(true)
  welcomeMessage Json
  offlineMessage Json
  workingHours   Json
  autoReplyDelay Int      @default(5)
  theme          Json
  position       String   @default("bottom-right")
  departments    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model Department {
  id               String           @id
  name             String           @unique
  code             String           @unique
  description      String?
  managerId        String?
  parentId         String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  users            User?            @relation(fields: [managerId], references: [id])
  Department       Department?      @relation("DepartmentToDepartment", fields: [parentId], references: [id])
  other_Department Department[]     @relation("DepartmentToDepartment")
  UserDepartment   UserDepartment[]

  @@index([code])
  @@index([managerId])
  @@index([parentId])
}

model EmailCampaign {
  id                     String                   @id
  name                   String
  subject                String
  preheader              String?
  fromName               String
  fromEmail              String
  replyTo                String?
  content                Json
  template               String?
  status                 String                   @default("draft")
  scheduledAt            DateTime?
  sentAt                 DateTime?
  completedAt            DateTime?
  targetTags             String[]
  excludeTags            String[]
  stats                  Json?
  createdById            String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  users                  User                     @relation(fields: [createdById], references: [id])
  EmailCampaignRecipient EmailCampaignRecipient[]

  @@index([scheduledAt])
  @@index([status])
}

model EmailCampaignRecipient {
  id              String          @id
  campaignId      String
  subscriberId    String
  status          String          @default("pending")
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  unsubscribedAt  DateTime?
  openCount       Int             @default(0)
  clickCount      Int             @default(0)
  EmailCampaign   EmailCampaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  EmailSubscriber EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([campaignId, subscriberId])
  @@index([campaignId])
  @@index([status])
  @@index([subscriberId])
}

model EmailSubscriber {
  id                     String                   @id
  email                  String                   @unique
  name                   String?
  status                 String                   @default("active")
  customFields           Json?
  source                 String?
  confirmToken           String?                  @unique
  confirmedAt            DateTime?
  unsubscribedAt         DateTime?
  unsubscribeToken       String                   @unique
  bounceCount            Int                      @default(0)
  subscribedAt           DateTime                 @default(now())
  updatedAt              DateTime
  EmailCampaignRecipient EmailCampaignRecipient[]
  SubscriberTag          SubscriberTag[]

  @@index([email])
  @@index([status])
}

model Form {
  id             String           @id
  name           String
  slug           String           @unique
  description    String?
  fields         Json
  settings       Json?
  isActive       Boolean          @default(true)
  honeypot       Boolean          @default(true)
  recaptcha      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdBy      String
  users          User             @relation(fields: [createdBy], references: [id])
  FormSubmission FormSubmission[]

  @@index([isActive])
  @@index([slug])
}

model FormSubmission {
  id          String   @id
  formId      String
  data        Json
  metadata    Json?
  status      String   @default("new")
  submittedBy String?
  createdAt   DateTime @default(now())
  Form        Form     @relation(fields: [formId], references: [id])
  users       User?    @relation(fields: [submittedBy], references: [id])

  @@index([createdAt])
  @@index([formId])
  @@index([status])
}

model Gallery {
  id           String         @id
  name         String
  slug         String         @unique
  description  String?
  categoryId   String?
  isPublic     Boolean        @default(true)
  order        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Category     Category?      @relation(fields: [categoryId], references: [id])
  GalleryMedia GalleryMedia[]

  @@index([categoryId])
  @@index([slug])
}

model GalleryMedia {
  id        String  @id
  galleryId String
  mediaId   String
  order     Int     @default(0)
  Gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  Media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([galleryId, mediaId])
  @@index([galleryId])
  @@index([mediaId])
}

model GitConfig {
  id               String             @id
  projectId        String             @unique
  projectPath      String
  repoName         String
  isGitRepo        Boolean
  isBare           Boolean
  workingDir       String
  currentBranch    String
  defaultBranch    String
  isClean          Boolean
  ahead            Int                @default(0)
  behind           Int                @default(0)
  staged           Int                @default(0)
  modified         Int                @default(0)
  untracked        Int                @default(0)
  userName         String?
  userEmail        String?
  remotes          Json
  branches         Json
  config           Json
  gitVersion       String?
  lastFetch        DateTime?
  syncedAt         DateTime           @default(now())
  updatedAt        DateTime
  Project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  GitConfigHistory GitConfigHistory[]

  @@index([projectId])
  @@index([syncedAt])
}

model GitConfigHistory {
  id         String    @id
  configId   String
  projectId  String
  changeType String
  fromValue  String?
  toValue    String?
  details    Json?
  userId     String?
  timestamp  DateTime  @default(now())
  GitConfig  GitConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  Project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users      User?     @relation(fields: [userId], references: [id])

  @@index([configId])
  @@index([projectId])
  @@index([timestamp])
  @@index([userId])
}

model KBAttachment {
  id         String   @id
  issueId    String
  filename   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  uploadedAt DateTime @default(now())
  KBIssue    KBIssue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  users      User     @relation(fields: [uploadedBy], references: [id])

  @@index([issueId])
}

model KBCategory {
  id               String       @id
  name             String       @unique
  description      String?
  parentId         String?
  color            String?
  icon             String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  KBCategory       KBCategory?  @relation("KBCategoryToKBCategory", fields: [parentId], references: [id])
  other_KBCategory KBCategory[] @relation("KBCategoryToKBCategory")
  KBIssue          KBIssue[]

  @@index([parentId])
}

model KBIssue {
  id                                                      String            @id
  title                                                   String
  description                                             String
  errorMessage                                            String?
  stackTrace                                              String?
  severity                                                String            @default("medium")
  status                                                  String            @default("open")
  categoryId                                              String?
  environment                                             String?
  affectedComponents                                      String[]
  reproductionSteps                                       String?
  businessImpact                                          String?
  createdBy                                               String
  assignedTo                                              String?
  resolvedAt                                              DateTime?
  createdAt                                               DateTime          @default(now())
  updatedAt                                               DateTime
  KBAttachment                                            KBAttachment[]
  users_KBIssue_assignedToTousers                         User?             @relation("KBIssue_assignedToTousers", fields: [assignedTo], references: [id])
  KBCategory                                              KBCategory?       @relation(fields: [categoryId], references: [id])
  users_KBIssue_createdByTousers                          User              @relation("KBIssue_createdByTousers", fields: [createdBy], references: [id])
  KBIssueRelation_KBIssueRelation_parentIssueIdToKBIssue  KBIssueRelation[] @relation("KBIssueRelation_parentIssueIdToKBIssue")
  KBIssueRelation_KBIssueRelation_relatedIssueIdToKBIssue KBIssueRelation[] @relation("KBIssueRelation_relatedIssueIdToKBIssue")
  KBIssueTag                                              KBIssueTag[]
  KBSearchIndex                                           KBSearchIndex[]
  KBSolution                                              KBSolution[]

  @@index([assignedTo])
  @@index([categoryId])
  @@index([createdAt])
  @@index([createdBy])
  @@index([severity])
  @@index([status])
}

model KBIssueRelation {
  id                                              String   @id
  parentIssueId                                   String
  relatedIssueId                                  String
  relationshipType                                String
  createdBy                                       String
  createdAt                                       DateTime @default(now())
  users                                           User     @relation(fields: [createdBy], references: [id])
  KBIssue_KBIssueRelation_parentIssueIdToKBIssue  KBIssue  @relation("KBIssueRelation_parentIssueIdToKBIssue", fields: [parentIssueId], references: [id], onDelete: Cascade)
  KBIssue_KBIssueRelation_relatedIssueIdToKBIssue KBIssue  @relation("KBIssueRelation_relatedIssueIdToKBIssue", fields: [relatedIssueId], references: [id], onDelete: Cascade)

  @@unique([parentIssueId, relatedIssueId, relationshipType])
  @@index([parentIssueId])
  @@index([relatedIssueId])
}

model KBIssueTag {
  id      String  @id
  issueId String
  tagId   String
  KBIssue KBIssue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  KBTag   KBTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([issueId, tagId])
  @@index([issueId])
  @@index([tagId])
}

model KBSearchIndex {
  id            String      @id
  issueId       String?
  solutionId    String?
  contentVector String?
  contentText   String
  lastIndexed   DateTime    @default(now())
  KBIssue       KBIssue?    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  KBSolution    KBSolution? @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([lastIndexed])
  @@index([solutionId])
}

model KBSolution {
  id                 String               @id
  issueId            String
  title              String
  description        String
  codeSnippet        String?
  rootCause          String?
  preventionSteps    String?
  effectivenessScore Int                  @default(0)
  verified           Boolean              @default(false)
  verificationCount  Int                  @default(0)
  createdBy          String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  KBSearchIndex      KBSearchIndex[]
  users              User                 @relation(fields: [createdBy], references: [id])
  KBIssue            KBIssue              @relation(fields: [issueId], references: [id], onDelete: Cascade)
  KBSolutionFeedback KBSolutionFeedback[]

  @@index([createdBy])
  @@index([effectivenessScore])
  @@index([issueId])
}

model KBSolutionFeedback {
  id            String     @id
  solutionId    String
  userId        String
  rating        Int
  comment       String?
  resolvedIssue Boolean
  timeToResolve Int?
  createdAt     DateTime   @default(now())
  KBSolution    KBSolution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  users         User       @relation(fields: [userId], references: [id])

  @@index([rating])
  @@index([solutionId])
  @@index([userId])
}

model KBTag {
  id          String       @id
  name        String       @unique
  description String?
  color       String?
  createdAt   DateTime     @default(now())
  KBIssueTag  KBIssueTag[]

  @@index([name])
}

model LoginHistory {
  id            String   @id
  userId        String
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
}

model Media {
  id           String         @id
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  width        Int?
  height       Int?
  metadata     Json?
  folderId     String?
  isPublic     Boolean        @default(true)
  scanStatus   String         @default("pending")
  scanResult   Json?
  createdAt    DateTime       @default(now())
  uploadedBy   String
  deletedAt    DateTime?
  GalleryMedia GalleryMedia[]
  MediaFolder  MediaFolder?   @relation(fields: [folderId], references: [id])
  users        User           @relation(fields: [uploadedBy], references: [id])
  MediaTag     MediaTag[]
  PostMedia    PostMedia[]

  @@index([createdAt])
  @@index([folderId])
  @@index([uploadedBy])
}

model MediaFolder {
  id                String        @id
  name              String
  parentId          String?
  path              String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  Media             Media[]
  MediaFolder       MediaFolder?  @relation("MediaFolderToMediaFolder", fields: [parentId], references: [id])
  other_MediaFolder MediaFolder[] @relation("MediaFolderToMediaFolder")

  @@index([parentId])
  @@index([path])
}

model MediaTag {
  id      String @id
  mediaId String
  tagId   String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  Tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([mediaId, tagId])
  @@index([mediaId])
  @@index([tagId])
}

model Menu {
  id        String   @id
  name      String
  code      String   @unique
  location  String
  items     Json
  settings  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([code])
  @@index([location])
}

model MenuItem {
  id                              String    @id
  menuId                          String
  label                           String
  url                             String
  type                            String
  target                          String    @default("_self")
  icon                            String?
  order                           Int       @default(0)
  parentId                        String?
  isActive                        Boolean   @default(true)
  createdAt                       DateTime  @default(now())
  createdBy                       String
  updatedAt                       DateTime
  updatedBy                       String?
  deletedAt                       DateTime?
  deletedBy                       String?
  users_MenuItem_createdByTousers User      @relation("MenuItem_createdByTousers", fields: [createdBy], references: [id])
  users_MenuItem_deletedByTousers User?     @relation("MenuItem_deletedByTousers", fields: [deletedBy], references: [id])
  users_MenuItem_updatedByTousers User?     @relation("MenuItem_updatedByTousers", fields: [updatedBy], references: [id])

  @@index([isActive])
  @@index([menuId])
  @@index([order])
  @@index([parentId])
}

model Page {
  id                          String          @id
  title                       String
  slug                        String          @unique
  content                     String?
  components                  Json?
  excerpt                     String?
  status                      String          @default("draft")
  publishedAt                 DateTime?
  metaTitle                   String?
  metaDescription             String?
  metaKeywords                String?
  ogImage                     String?
  language                    String          @default("en")
  translations                Json?
  layout                      String          @default("default")
  template                    String?
  templateId                  String?
  customCss                   String?
  customJs                    String?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime
  createdBy                   String?
  updatedBy                   String?
  deletedAt                   DateTime?
  version                     Int             @default(1)
  authorId                    String?
  featuredImage               String?
  isHomePage                  Boolean         @default(false)
  seoDescription              String?
  seoKeywords                 String?
  seoTitle                    String?
  views                       Int             @default(0)
  users_Page_authorIdTousers  User?           @relation("Page_authorIdTousers", fields: [authorId], references: [id])
  users_Page_createdByTousers User?           @relation("Page_createdByTousers", fields: [createdBy], references: [id])
  PageTemplate                PageTemplate?   @relation(fields: [templateId], references: [id])
  PageComponent               PageComponent[]

  @@index([authorId])
  @@index([language])
  @@index([publishedAt])
  @@index([slug])
  @@index([status])
}

model PageComponent {
  id                  String          @id
  pageId              String
  type                String
  order               Int
  settings            Json
  content             Json
  columnIndex         Int?
  parentId            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime
  Page                Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  PageComponent       PageComponent?  @relation("PageComponentToPageComponent", fields: [parentId], references: [id])
  other_PageComponent PageComponent[] @relation("PageComponentToPageComponent")

  @@index([pageId, order])
  @@index([parentId])
}

model PageTemplate {
  id        String   @id
  name      Json
  code      String   @unique
  structure Json
  preview   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Page      Page[]
}

model PasswordReset {
  id        String    @id
  token     String    @unique
  userId    String
  expires   DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  createdAt DateTime  @default(now())
  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([token])
  @@index([userId])
}

model Permission {
  id             String           @id
  code           String           @unique
  name           String
  description    String?
  resource       String
  action         String
  scope          String           @default("global")
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  RolePermission RolePermission[]

  @@unique([resource, action, scope])
  @@index([code])
  @@index([isActive])
  @@index([resource])
}

model Portfolio {
  id                      String              @id
  userId                  String
  name                    String
  description             String?
  isDefault               Boolean             @default(false)
  isPublic                Boolean             @default(false)
  totalValue              Float               @default(0)
  totalCost               Float               @default(0)
  totalGainLoss           Float               @default(0)
  totalGainLossPercentage Float               @default(0)
  dayChange               Float               @default(0)
  dayChangePercentage     Float               @default(0)
  currency                String              @default("USD")
  metadata                Json?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime
  users                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  PortfolioSnapshot       PortfolioSnapshot[]
  Position                Position[]
  Trade                   Trade[]

  @@unique([userId, name])
  @@index([isPublic])
  @@index([userId])
}

model PortfolioSnapshot {
  id                 String    @id
  portfolioId        String
  date               DateTime  @db.Date
  totalValue         Float
  totalCost          Float
  gainLoss           Float
  gainLossPercentage Float
  metadata           Json?
  createdAt          DateTime  @default(now())
  Portfolio          Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, date])
  @@index([date])
  @@index([portfolioId])
}

model Position {
  id                  String    @id
  portfolioId         String
  stockId             String
  quantity            Float
  averageCost         Float
  totalCost           Float
  currentValue        Float     @default(0)
  gainLoss            Float     @default(0)
  gainLossPercentage  Float     @default(0)
  dayChange           Float     @default(0)
  dayChangePercentage Float     @default(0)
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime
  Portfolio           Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  Stock               Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, stockId])
  @@index([portfolioId])
  @@index([stockId])
}

model Post {
  id              String      @id
  title           String
  slug            String      @unique
  content         String?
  excerpt         String?
  featuredImage   String?
  status          String      @default("draft")
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  categoryId      String?
  views           Int         @default(0)
  likes           Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  authorId        String
  deletedAt       DateTime?
  users           User        @relation(fields: [authorId], references: [id])
  Category        Category?   @relation(fields: [categoryId], references: [id])
  PostMedia       PostMedia[]
  PostTag         PostTag[]

  @@index([authorId])
  @@index([categoryId])
  @@index([publishedAt])
  @@index([slug])
  @@index([status])
}

model PostMedia {
  id      String @id
  postId  String
  mediaId String
  order   Int    @default(0)
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  Post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@index([mediaId])
  @@index([postId])
}

model PostTag {
  id     String @id
  postId String
  tagId  String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  Tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model Project {
  id                       String                     @id
  name                     String
  description              String
  path                     String
  structure                Json
  envVariables             Json                       @default("{}")
  scripts                  Json                       @default("[]")
  settings                 Json?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  AssistantAnalytics       AssistantAnalytics[]
  AssistantCommand         AssistantCommand[]
  AssistantFile            AssistantFile[]
  GitConfig                GitConfig?
  GitConfigHistory         GitConfigHistory[]
  ProjectPreferences       ProjectPreferences[]
  ProjectStatusCache       ProjectStatusCache?
  TerminalCommand          TerminalCommand[]
  TerminalSession          TerminalSession[]
  WorkspaceTerminalCommand WorkspaceTerminalCommand[]
  WorkspaceTerminalLog     WorkspaceTerminalLog[]
  WorkspaceTerminalSession WorkspaceTerminalSession[]
  chat_messages            ChatMessage[]
  chat_sessions            ChatSession[]

  @@index([createdAt])
  @@index([name])
}

model ProjectPreferences {
  id             String   @id
  userId         String
  projectId      String
  isPinned       Boolean  @default(false)
  customIcon     String?
  customColor    String?
  sortOrder      Int      @default(0)
  lastAccessedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId, isPinned])
  @@index([userId, lastAccessedAt])
}

model ProjectStatusCache {
  id             String   @id
  projectId      String   @unique
  gitStatus      Json?
  terminalStatus Json?
  buildStatus    String?
  hasErrors      Boolean  @default(false)
  hasWarnings    Boolean  @default(false)
  lastUpdatedAt  DateTime @default(now())
  Project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([lastUpdatedAt])
}

model Role {
  id             String           @id
  name           String           @unique
  code           String           @unique
  description    String?
  level          Int              @default(0)
  isSystemRole   Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdBy      String?
  updatedBy      String?
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@index([code])
  @@index([isActive])
}

model RolePermission {
  id           String     @id
  roleId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId])
  @@index([roleId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([userId])
}

model Stock {
  id                String              @id
  symbol            String              @unique
  name              String
  exchange          String?
  type              String?             @default("EQUITY")
  sector            String?
  industry          String?
  currentPrice      Float               @default(0)
  previousClose     Float?              @default(0)
  dayChange         Float?              @default(0)
  dayChangePercent  Float?              @default(0)
  volume            Int?                @default(0)
  marketCap         BigInt?
  pe                Float?
  eps               Float?
  beta              Float?
  dividendYield     Float?
  weekHigh52        Float?
  weekLow52         Float?
  currency          String?             @default("USD")
  lastUpdated       DateTime?           @default(now())
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Position          Position[]
  StockPriceHistory StockPriceHistory[]
  Trade             Trade[]
  WatchlistStock    WatchlistStock[]

  @@index([sector])
  @@index([symbol])
}

model StockPriceHistory {
  id            String   @id
  stockId       String
  date          DateTime @db.Date
  open          Float
  high          Float
  low           Float
  close         Float
  adjustedClose Float?
  volume        BigInt?
  createdAt     DateTime @default(now())
  Stock         Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([stockId, date])
  @@index([date])
  @@index([stockId])
}

model SubscriberTag {
  id              String          @id
  subscriberId    String
  tagId           String
  EmailSubscriber EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  Tag             Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, tagId])
  @@index([subscriberId])
  @@index([tagId])
}

model Survey {
  id             String           @id
  title          Json
  description    Json?
  slug           String           @unique
  fields         Json
  settings       Json
  status         String           @default("active")
  startDate      DateTime?
  endDate        DateTime?
  maxResponses   Int?
  requireAuth    Boolean          @default(false)
  allowMultiple  Boolean          @default(false)
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  users          User             @relation(fields: [createdById], references: [id])
  SurveyResponse SurveyResponse[]

  @@index([slug])
  @@index([status])
}

model SurveyResponse {
  id           String   @id
  surveyId     String
  data         Json
  metadata     Json?
  score        Int?
  respondentId String?
  submittedAt  DateTime @default(now())
  Survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([respondentId])
  @@index([submittedAt])
  @@index([surveyId])
}

model SystemConfig {
  id          String   @id
  key         String   @unique
  value       Json
  type        String
  category    String
  description String?
  isPublic    Boolean  @default(false)
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([key])
}

model Tag {
  id            String          @id
  name          String          @unique
  slug          String          @unique
  description   String?
  color         String?
  icon          String?
  usageCount    Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  createdBy     String?
  MediaTag      MediaTag[]
  PostTag       PostTag[]
  SubscriberTag SubscriberTag[]
  users         User?           @relation(fields: [createdBy], references: [id])

  @@index([name])
  @@index([slug])
  @@index([usageCount])
}

model Team {
  id          String       @id
  name        String
  code        String       @unique
  description String?
  leaderId    String?
  isActive    Boolean      @default(true)
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  users       User?        @relation(fields: [leaderId], references: [id])
  TeamMember  TeamMember[]

  @@index([code])
  @@index([leaderId])
}

model TeamMember {
  id       String    @id
  teamId   String
  userId   String
  role     String    @default("member")
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  Team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  users    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TerminalAnalytics {
  id               String   @id
  userId           String?
  date             DateTime @db.Date
  commandCount     Int      @default(0)
  errorCount       Int      @default(0)
  sessionCount     Int      @default(0)
  totalDuration    Int      @default(0)
  uniqueCommands   Json
  commonPatterns   Json
  errorPatterns    Json
  workflowPatterns Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  users            User?    @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([date])
  @@index([userId])
}

model TerminalCommand {
  id              String          @id
  sessionId       String
  projectId       String
  command         String
  output          String
  exitCode        Int?
  timestamp       DateTime        @default(now())
  Project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  TerminalSession TerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sessionId])
  @@index([timestamp])
}

model TerminalCommandPattern {
  id           String   @id
  pattern      String   @unique
  name         String
  description  String?
  category     String
  frequency    Int      @default(0)
  avgDuration  Int?
  successRate  Float?
  suggestedSop Json?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([category])
  @@index([frequency])
}

model TerminalLog {
  id              String          @id
  sessionId       String
  userId          String?
  type            String
  direction       String?
  content         String
  rawContent      String?
  timestamp       DateTime        @default(now())
  sequence        Int
  metadata        Json?
  TerminalSession TerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  users           User?           @relation(fields: [userId], references: [id])

  @@index([sessionId, sequence])
  @@index([timestamp])
  @@index([type])
  @@index([userId])
}

model TerminalSOP {
  id          String   @id
  title       String
  description String?
  workflow    Json
  triggers    Json
  category    String
  tags        String[]
  usageCount  Int      @default(0)
  successRate Float?
  avgDuration Int?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       User?    @relation(fields: [createdBy], references: [id])

  @@index([category])
  @@index([createdBy])
  @@index([isActive])
}

model TerminalSession {
  id                   String                @id
  projectId            String
  userId               String?
  type                 String
  tabName              String
  active               Boolean               @default(true)
  output               Json                  @default("[]")
  currentPath          String
  pid                  Int?
  metadata             Json?
  startedAt            DateTime              @default(now())
  endedAt              DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  status               String                @default("active")
  TerminalCommand      TerminalCommand[]
  TerminalLog          TerminalLog[]
  Project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users                User?                 @relation(fields: [userId], references: [id])
  TerminalSessionState TerminalSessionState?

  @@index([active])
  @@index([projectId])
  @@index([startedAt])
  @@index([status])
  @@index([type])
  @@index([userId])
}

model TerminalSessionState {
  id               String          @id
  sessionId        String          @unique
  projectId        String
  suspendedAt      DateTime?
  resumedAt        DateTime?
  outputBuffer     Json            @default("[]")
  cursorPosition   Json?
  workingDirectory String?
  environmentVars  Json?
  uiState          Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  TerminalSession  TerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([resumedAt])
  @@index([suspendedAt])
}

model TerminalShortcut {
  id          String   @id
  userId      String?
  alias       String
  command     String
  description String?
  category    String?
  usageCount  Int      @default(0)
  isGlobal    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, alias])
  @@index([isGlobal])
  @@index([userId])
}

model ThemeConfig {
  id          String   @id
  name        String   @unique @default("default")
  colors      Json
  fonts       Json
  layout      Json
  components  Json?
  customCss   String?
  customJs    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  updatedById String?
  users       User?    @relation(fields: [updatedById], references: [id])
}

model Trade {
  id          String    @id
  portfolioId String
  stockId     String
  type        String
  quantity    Float
  price       Float
  totalAmount Float
  commission  Float?    @default(0)
  notes       String?
  executedAt  DateTime  @default(now())
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  Stock       Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([executedAt])
  @@index([portfolioId])
  @@index([stockId])
  @@index([type])
}

model Translation {
  id        String   @id
  key       String   @unique
  namespace String   @default("common")
  locale    String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@unique([key, locale, namespace])
  @@index([locale])
  @@index([namespace])
}

model UserActivity {
  id         String   @id
  userId     String
  action     String
  resource   String?
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  duration   Int?
  createdAt  DateTime @default(now())
  users      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}

model UserApiKey {
  id         String    @id
  userId     String
  name       String
  key        String    @unique
  scopes     String[]
  lastUsed   DateTime?
  usageCount Int       @default(0)
  rateLimit  Int       @default(1000)
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  users      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([key])
  @@index([userId])
}

model UserConfig {
  id        String   @id
  userId    String
  key       String
  value     Json
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([category])
  @@index([userId])
}

model UserDepartment {
  id           String     @id
  userId       String
  departmentId String
  position     String?
  isPrimary    Boolean    @default(false)
  startDate    DateTime   @default(now())
  endDate      DateTime?
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([departmentId])
  @@index([userId])
}

model UserDevice {
  id         String   @id
  userId     String
  deviceId   String   @unique
  deviceType String
  deviceName String?
  platform   String?
  pushToken  String?
  lastActive DateTime @default(now())
  isActive   Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())
  users      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([lastActive])
  @@index([userId])
}

model UserInvitation {
  id         String    @id
  email      String
  role       String
  message    String?
  token      String    @unique
  status     String    @default("pending")
  expiresAt  DateTime
  acceptedAt DateTime?
  invitedBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  users      User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([expiresAt])
  @@index([status])
  @@index([token])
}

model UserNotification {
  id        String    @id
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  sentAt    DateTime  @default(now())
  expiresAt DateTime?
  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isRead])
  @@index([sentAt])
  @@index([userId])
}

model UserPreference {
  id        String   @id
  userId    String
  category  String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
  @@index([category])
  @@index([userId])
}

model UserProfile {
  id            String    @id
  userId        String    @unique
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  timezone      String    @default("UTC")
  language      String    @default("en")
  currency      String    @default("USD")
  newsletter    Boolean   @default(false)
  notifications Json?
  preferences   Json?
  socialLinks   Json?
  occupation    String?
  company       String?
  website       String?
  interests     String[]
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  users         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserRole {
  id         String    @id
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  Role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  users      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([isActive])
  @@index([roleId])
  @@index([userId])
}

model UserSidebarSettings {
  id                   String   @id
  userId               String   @unique
  isCollapsed          Boolean  @default(false)
  width                Int      @default(250)
  sortBy               String   @default("lastAccessed")
  viewMode             String   @default("icons")
  showStatusIndicators Boolean  @default(true)
  groupBy              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  users                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watchlist {
  id             String           @id
  userId         String
  name           String
  description    String?
  isDefault      Boolean          @default(false)
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  users          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  WatchlistStock WatchlistStock[]

  @@unique([userId, name])
  @@index([userId])
}

model WatchlistStock {
  id          String    @id
  watchlistId String
  stockId     String
  notes       String?
  alertPrice  Float?
  alertType   String?
  addedAt     DateTime  @default(now())
  Stock       Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)
  Watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, stockId])
  @@index([stockId])
  @@index([watchlistId])
}

model WorkspaceTerminalCommand {
  id                       String                   @id
  sessionId                String
  projectId                String
  userId                   String
  command                  String
  workingDir               String
  output                   String?
  errorOutput              String?
  exitCode                 Int?
  duration                 Int?
  timestamp                DateTime                 @default(now())
  Project                  Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  WorkspaceTerminalSession WorkspaceTerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  users                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sessionId])
  @@index([timestamp])
  @@index([userId])
}

model WorkspaceTerminalLog {
  id                       String                   @id
  sessionId                String
  projectId                String
  userId                   String
  type                     String
  content                  String
  rawContent               String?
  sequence                 Int
  timestamp                DateTime                 @default(now())
  Project                  Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  WorkspaceTerminalSession WorkspaceTerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  users                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sessionId, sequence])
  @@index([timestamp])
  @@index([type])
  @@index([userId])
}

model WorkspaceTerminalSession {
  id                       String                     @id
  projectId                String
  workspaceId              String?
  userId                   String
  type                     String
  tabName                  String
  active                   Boolean                    @default(true)
  currentPath              String
  environment              Json?
  pid                      Int?
  metadata                 Json?
  startedAt                DateTime                   @default(now())
  endedAt                  DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  WorkspaceTerminalCommand WorkspaceTerminalCommand[]
  WorkspaceTerminalLog     WorkspaceTerminalLog[]
  Project                  Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([projectId])
  @@index([startedAt])
  @@index([userId])
  @@index([workspaceId])
}

model assistant_conversation_legacy {
  id                       String                     @id(map: "AssistantConversation_pkey")
  userId                   String
  sessionId                String
  title                    String?
  folderId                 String?
  isActive                 Boolean                    @default(true)
  startedAt                DateTime                   @default(now())
  endedAt                  DateTime?
  metadata                 Json?
  chat_folders             ChatFolder?                @relation(fields: [folderId], references: [id], map: "AssistantConversation_folderId_fkey")
  users                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AssistantConversation_userId_fkey")
  assistant_message_legacy assistant_message_legacy[]

  @@unique([userId, sessionId], map: "AssistantConversation_userId_sessionId_key")
  @@index([folderId], map: "AssistantConversation_folderId_idx")
  @@index([sessionId], map: "AssistantConversation_sessionId_idx")
  @@index([startedAt], map: "AssistantConversation_startedAt_idx")
  @@index([userId], map: "AssistantConversation_userId_idx")
}

model assistant_message_legacy {
  id                            String                        @id(map: "AssistantMessage_pkey")
  conversationId                String
  content                       String
  type                          String
  metadata                      Json?
  createdAt                     DateTime                      @default(now())
  assistant_conversation_legacy assistant_conversation_legacy @relation(fields: [conversationId], references: [id], onDelete: Cascade, map: "AssistantMessage_conversationId_fkey")

  @@index([conversationId], map: "AssistantMessage_conversationId_idx")
  @@index([createdAt], map: "AssistantMessage_createdAt_idx")
}

// Fair Use Policy Compliance Tables
model usage_tracking {
  id            String   @id @default(uuid())
  user_id       String
  session_id    String
  input_tokens  Int      @default(0)
  output_tokens Int      @default(0)
  timestamp     DateTime @default(now())
  metadata      Json?

  @@index([user_id])
  @@index([timestamp])
  @@index([session_id])
  @@index([user_id, timestamp(sort: Desc)])
}

model user_context {
  id                 String   @id @default(uuid())
  user_id            String   @unique
  context_summary    String?
  recent_messages    Json?
  system_prompt      String?
  total_interactions Int      @default(0)
  last_interaction   DateTime?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@index([updated_at(sort: Desc)])
}

model rate_limits {
  id         String   @id @default(uuid())
  user_id    String
  limit_type String   // 'minute', 'hour', 'day'
  count      Int      @default(0)
  reset_at   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([user_id, limit_type])
  @@index([user_id])
  @@index([reset_at])
}
