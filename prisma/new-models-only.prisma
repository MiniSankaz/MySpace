// ============================================
// NEW MODELS TO ADD (ที่ยังไม่มีใน schema)
// ============================================

// AI Assistant Chat Sessions (for Claude AI Chat)
model AssistantChatSession {
  id              String    @id @default(uuid())
  userId          String
  projectId       String?   // Optional - ถ้าใช้ใน context ของ project
  sessionName     String?   // ชื่อ conversation
  model           String    // claude-3-opus, claude-3-sonnet, etc.
  temperature     Float     @default(0.7)
  maxTokens       Int       @default(4096)
  totalTokensUsed Int       @default(0)
  totalCost       Float     @default(0)
  metadata        Json?     // เก็บ settings และข้อมูลอื่นๆ
  startedAt       DateTime  @default(now())
  lastActiveAt    DateTime  @updatedAt
  endedAt         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project         Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages        AssistantMessage[]
  commands        AssistantCommand[]   // คำสั่งที่ AI สร้าง
  files           AssistantFile[]      // ไฟล์ที่เกี่ยวข้อง
  analytics       AssistantAnalytics[]
  
  @@index([userId])
  @@index([projectId])
  @@index([lastActiveAt])
}

// Commands generated by AI Assistant
model AssistantCommand {
  id            String                @id @default(uuid())
  sessionId     String
  messageId     String?               // Link to message that generated this
  projectId     String?
  command       String                @db.Text
  type          String                // 'terminal', 'file_edit', 'file_create', etc.
  status        String                // 'pending', 'executed', 'failed', 'skipped'
  output        String?               @db.Text
  error         String?               @db.Text
  executedAt    DateTime?
  executedBy    String?               // User who approved/executed
  metadata      Json?
  createdAt     DateTime              @default(now())
  
  Session       AssistantChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Project       Project?              @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([sessionId])
  @@index([projectId])
  @@index([status])
  @@index([type])
}

// Files created/modified by AI Assistant
model AssistantFile {
  id            String                @id @default(uuid())
  sessionId     String
  projectId     String?
  filePath      String
  action        String                // 'created', 'modified', 'deleted', 'read'
  content       String?               @db.Text  // File content snapshot
  diff          String?               @db.Text  // Changes made
  metadata      Json?
  timestamp     DateTime              @default(now())
  
  Session       AssistantChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Project       Project?              @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([sessionId])
  @@index([projectId])
  @@index([action])
  @@index([timestamp])
}

// Analytics for AI Assistant usage
model AssistantAnalytics {
  id              String                @id @default(uuid())
  sessionId       String?
  userId          String
  projectId       String?
  date            DateTime              @db.Date
  messagesCount   Int                   @default(0)
  tokensUsed      Int                   @default(0)
  totalCost       Float                 @default(0)
  commandsCount   Int                   @default(0)
  filesModified   Int                   @default(0)
  errorsCount     Int                   @default(0)
  avgLatency      Float?                // Average response time
  metadata        Json?
  createdAt       DateTime              @default(now())
  
  Session         AssistantChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  User            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project         Project?              @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@unique([userId, projectId, date])
  @@index([userId])
  @@index([projectId])
  @@index([date])
}

// Terminal Sessions for Workspace
model WorkspaceTerminalSession {
  id            String    @id @default(uuid())
  projectId     String    // Required - Terminal ต้องผูกกับ project
  workspaceId   String?   // Optional - ถ้ามี workspace concept
  userId        String    // User ที่ใช้งาน
  type          String    // 'bash', 'zsh', 'powershell', 'cmd'
  tabName       String
  active        Boolean   @default(true)
  currentPath   String
  environment   Json?     // Environment variables
  pid           Int?
  metadata      Json?
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  Project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commands      WorkspaceTerminalCommand[]
  logs          WorkspaceTerminalLog[]
  
  @@index([projectId])
  @@index([workspaceId])
  @@index([userId])
  @@index([active])
  @@index([startedAt])
}

// Commands in Workspace Terminal
model WorkspaceTerminalCommand {
  id            String                    @id @default(uuid())
  sessionId     String
  projectId     String
  userId        String
  command       String                    @db.Text
  workingDir    String
  output        String?                   @db.Text
  errorOutput   String?                   @db.Text
  exitCode      Int?
  duration      Int?                      // Execution time in ms
  timestamp     DateTime                  @default(now())
  
  Session       WorkspaceTerminalSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Project       Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([projectId])
  @@index([userId])
  @@index([timestamp])
}

// Detailed logs for Workspace Terminal
model WorkspaceTerminalLog {
  id            String                    @id @default(uuid())
  sessionId     String
  projectId     String
  userId        String
  type          String                    // 'stdin', 'stdout', 'stderr', 'system'
  content       String                    @db.Text
  rawContent    String?                   @db.Text  // With ANSI codes
  sequence      Int                       // Order in session
  timestamp     DateTime                  @default(now())
  
  Session       WorkspaceTerminalSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Project       Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, sequence])
  @@index([projectId])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}