generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  severity   String   @default("info")
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([resource])
  @@index([userId])
}

model Category {
  id             String     @id
  name           String
  slug           String     @unique
  description    String?
  parentId       String?
  order          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  Gallery        Gallery[]
  Post           Post[]

  @@index([parentId])
  @@index([slug])
}

model Translation {
  id        String   @id @default(cuid())
  key       String   @unique
  namespace String   @default("common")
  locale    String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, locale, namespace])
  @@index([namespace])
  @@index([locale])
}

model ChatConversation {
  id           String        @id
  visitorId    String
  visitorName  String?
  visitorEmail String?
  visitorPhone String?
  status       String        @default("active")
  rating       Int?
  startedAt    DateTime      @default(now())
  endedAt      DateTime?
  metadata     Json?
  agentId      String?
  User         User?         @relation(fields: [agentId], references: [id])
  ChatMessage  ChatMessage[]

  @@index([agentId])
  @@index([startedAt])
  @@index([status])
  @@index([visitorId])
}

model ChatMessage {
  id               String           @id
  conversationId   String
  senderId         String
  senderType       String
  message          String
  attachments      Json?
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())
  ChatConversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ChatSettings {
  id             String   @id
  isEnabled      Boolean  @default(true)
  welcomeMessage Json
  offlineMessage Json
  workingHours   Json
  autoReplyDelay Int      @default(5)
  theme          Json
  position       String   @default("bottom-right")
  departments    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model EmailCampaign {
  id                     String                   @id
  name                   String
  subject                String
  preheader              String?
  fromName               String
  fromEmail              String
  replyTo                String?
  content                Json
  template               String?
  status                 String                   @default("draft")
  scheduledAt            DateTime?
  sentAt                 DateTime?
  completedAt            DateTime?
  targetTags             String[]
  excludeTags            String[]
  stats                  Json?
  createdById            String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  User                   User                     @relation(fields: [createdById], references: [id])
  EmailCampaignRecipient EmailCampaignRecipient[]

  @@index([scheduledAt])
  @@index([status])
}

model EmailCampaignRecipient {
  id              String          @id
  campaignId      String
  subscriberId    String
  status          String          @default("pending")
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  unsubscribedAt  DateTime?
  openCount       Int             @default(0)
  clickCount      Int             @default(0)
  EmailCampaign   EmailCampaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  EmailSubscriber EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([campaignId, subscriberId])
  @@index([campaignId])
  @@index([status])
  @@index([subscriberId])
}

model EmailSubscriber {
  id                     String                   @id
  email                  String                   @unique
  name                   String?
  status                 String                   @default("active")
  customFields           Json?
  source                 String?
  confirmToken           String?                  @unique
  confirmedAt            DateTime?
  unsubscribedAt         DateTime?
  unsubscribeToken       String                   @unique
  bounceCount            Int                      @default(0)
  subscribedAt           DateTime                 @default(now())
  updatedAt              DateTime
  EmailCampaignRecipient EmailCampaignRecipient[]
  SubscriberTag          SubscriberTag[]

  @@index([email])
  @@index([status])
}

model Form {
  id             String           @id
  name           String
  slug           String           @unique
  description    String?
  fields         Json
  settings       Json?
  isActive       Boolean          @default(true)
  honeypot       Boolean          @default(true)
  recaptcha      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdBy      String
  User           User             @relation(fields: [createdBy], references: [id])
  FormSubmission FormSubmission[]

  @@index([isActive])
  @@index([slug])
}

model FormSubmission {
  id          String   @id
  formId      String
  data        Json
  metadata    Json?
  status      String   @default("new")
  submittedBy String?
  createdAt   DateTime @default(now())
  Form        Form     @relation(fields: [formId], references: [id])
  User        User?    @relation(fields: [submittedBy], references: [id])

  @@index([createdAt])
  @@index([formId])
  @@index([status])
}

model Gallery {
  id           String         @id
  name         String
  slug         String         @unique
  description  String?
  categoryId   String?
  isPublic     Boolean        @default(true)
  order        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Category     Category?      @relation(fields: [categoryId], references: [id])
  GalleryMedia GalleryMedia[]

  @@index([categoryId])
  @@index([slug])
}

model GalleryMedia {
  id        String  @id
  galleryId String
  mediaId   String
  order     Int     @default(0)
  Gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  Media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([galleryId, mediaId])
  @@index([galleryId])
  @@index([mediaId])
}

model LoginHistory {
  id            String   @id
  userId        String
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
}

model Media {
  id           String         @id
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  width        Int?
  height       Int?
  metadata     Json?
  folderId     String?
  isPublic     Boolean        @default(true)
  scanStatus   String         @default("pending")
  scanResult   Json?
  createdAt    DateTime       @default(now())
  uploadedBy   String
  deletedAt    DateTime?
  GalleryMedia GalleryMedia[]
  MediaFolder  MediaFolder?   @relation(fields: [folderId], references: [id])
  User         User           @relation(fields: [uploadedBy], references: [id])
  MediaTag     MediaTag[]
  PostMedia    PostMedia[]

  @@index([createdAt])
  @@index([folderId])
  @@index([uploadedBy])
}

model MediaFolder {
  id                String        @id
  name              String
  parentId          String?
  path              String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  Media             Media[]
  MediaFolder       MediaFolder?  @relation("MediaFolderToMediaFolder", fields: [parentId], references: [id])
  other_MediaFolder MediaFolder[] @relation("MediaFolderToMediaFolder")

  @@index([parentId])
  @@index([path])
}

model Menu {
  id        String   @id
  name      String
  code      String   @unique
  location  String
  items     Json
  settings  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([code])
  @@index([location])
}

model Page {
  id                        String          @id
  title                     String
  slug                      String          @unique
  content                   String?
  components                Json?
  excerpt                   String?
  status                    String          @default("draft")
  publishedAt               DateTime?
  metaTitle                 String?
  metaDescription           String?
  metaKeywords              String?
  ogImage                   String?
  language                  String          @default("en")
  translations              Json?
  layout                    String          @default("default")
  template                  String?
  templateId                String?
  customCss                 String?
  customJs                  String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime
  createdBy                 String?
  updatedBy                 String?
  deletedAt                 DateTime?
  version                   Int             @default(1)
  authorId                  String?
  featuredImage             String?
  isHomePage                Boolean         @default(false)
  seoDescription            String?
  seoKeywords               String?
  seoTitle                  String?
  views                     Int             @default(0)
  User_Page_authorIdToUser  User?           @relation("Page_authorIdToUser", fields: [authorId], references: [id])
  User_Page_createdByToUser User?           @relation("Page_createdByToUser", fields: [createdBy], references: [id])
  PageTemplate              PageTemplate?   @relation(fields: [templateId], references: [id])
  PageComponent             PageComponent[]

  @@index([authorId])
  @@index([language])
  @@index([publishedAt])
  @@index([slug])
  @@index([status])
}

model PageComponent {
  id                  String          @id
  pageId              String
  type                String
  order               Int
  settings            Json
  content             Json
  columnIndex         Int?
  parentId            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime
  Page                Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  PageComponent       PageComponent?  @relation("PageComponentToPageComponent", fields: [parentId], references: [id])
  other_PageComponent PageComponent[] @relation("PageComponentToPageComponent")

  @@index([pageId, order])
  @@index([parentId])
}

model PageTemplate {
  id        String   @id
  name      Json
  code      String   @unique
  structure Json
  preview   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Page      Page[]
}

model PasswordReset {
  id        String    @id
  token     String    @unique
  userId    String
  expires   DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([token])
  @@index([userId])
}

model Permission {
  id             String           @id
  code           String           @unique
  name           String
  description    String?
  resource       String
  action         String
  scope          String           @default("global")
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  RolePermission RolePermission[]

  @@unique([resource, action, scope])
  @@index([code])
  @@index([isActive])
  @@index([resource])
}

model Post {
  id              String      @id
  title           String
  slug            String      @unique
  content         String?
  excerpt         String?
  featuredImage   String?
  status          String      @default("draft")
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  categoryId      String?
  views           Int         @default(0)
  likes           Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  authorId        String
  deletedAt       DateTime?
  User            User        @relation(fields: [authorId], references: [id])
  Category        Category?   @relation(fields: [categoryId], references: [id])
  PostMedia       PostMedia[]
  PostTag         PostTag[]

  @@index([authorId])
  @@index([categoryId])
  @@index([publishedAt])
  @@index([slug])
  @@index([status])
}

model PostMedia {
  id      String @id
  postId  String
  mediaId String
  order   Int    @default(0)
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  Post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@index([mediaId])
  @@index([postId])
}

model Role {
  id             String           @id
  name           String           @unique
  code           String           @unique
  description    String?
  level          Int              @default(0)
  isSystemRole   Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdBy      String?
  updatedBy      String?
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@index([code])
  @@index([isActive])
}

model RolePermission {
  id           String     @id
  roleId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId])
  @@index([roleId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([userId])
}

model Survey {
  id             String           @id
  title          Json
  description    Json?
  slug           String           @unique
  fields         Json
  settings       Json
  status         String           @default("active")
  startDate      DateTime?
  endDate        DateTime?
  maxResponses   Int?
  requireAuth    Boolean          @default(false)
  allowMultiple  Boolean          @default(false)
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  User           User             @relation(fields: [createdById], references: [id])
  SurveyResponse SurveyResponse[]

  @@index([slug])
  @@index([status])
}

model SurveyResponse {
  id           String   @id
  surveyId     String
  data         Json
  metadata     Json?
  score        Int?
  respondentId String?
  submittedAt  DateTime @default(now())
  Survey       Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([respondentId])
  @@index([submittedAt])
  @@index([surveyId])
}

model SystemConfig {
  id          String   @id
  key         String   @unique
  value       Json
  type        String
  category    String
  description String?
  isPublic    Boolean  @default(false)
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([key])
}

model ThemeConfig {
  id          String   @id
  name        String   @unique @default("default")
  colors      Json
  fonts       Json
  layout      Json
  components  Json?
  customCss   String?
  customJs    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  updatedById String?
  User        User?    @relation(fields: [updatedById], references: [id])
}

model Tag {
  id            String          @id
  name          String          @unique
  slug          String          @unique
  description   String?
  color         String?
  icon          String?
  usageCount    Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  createdBy     String?
  MediaTag      MediaTag[]
  PostTag       PostTag[]
  SubscriberTag SubscriberTag[]
  User          User?           @relation(fields: [createdBy], references: [id])

  @@index([name])
  @@index([slug])
  @@index([usageCount])
}

model PostTag {
  id     String @id
  postId String
  tagId  String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  Tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model MediaTag {
  id      String @id
  mediaId String
  tagId   String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  Tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([mediaId, tagId])
  @@index([mediaId])
  @@index([tagId])
}

model SubscriberTag {
  id           String          @id
  subscriberId String
  tagId        String
  Subscriber   EmailSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  Tag          Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, tagId])
  @@index([subscriberId])
  @@index([tagId])
}

model User {
  id                                String                     @id
  email                             String                     @unique
  username                          String                     @unique
  passwordHash                      String
  firstName                         String?
  lastName                          String?
  displayName                       String?
  avatar                            String?
  bio                               String?
  phone                             String?
  isActive                          Boolean                    @default(true)
  emailVerified                     DateTime?
  phoneVerified                     DateTime?
  mfaEnabled                        Boolean                    @default(false)
  mfaSecret                         String?
  failedLoginAttempts               Int                        @default(0)
  lastLoginAt                       DateTime?
  lastLoginIp                       String?
  accountLockedUntil                DateTime?
  passwordChangedAt                 DateTime                   @default(now())
  mustChangePassword                Boolean                    @default(false)
  createdAt                         DateTime                   @default(now())
  updatedAt                         DateTime
  createdBy                         String?
  updatedBy                         String?
  deletedAt                         DateTime?
  deletedBy                         String?
  version                           Int                        @default(1)
  ApiToken                          ApiToken[]
  ApiUsageLog                       ApiUsageLog[]
  ApiWebhook                        ApiWebhook[]
  AssistantAnalytics                AssistantAnalytics[]
  AssistantChatMessages             AssistantChatMessage[]
  AssistantChatSessions             AssistantChatSession[]
  AssistantConversation             AssistantConversation[]
  AssistantFolder                   AssistantFolder[]
  AssistantNote                     AssistantNote[]
  AssistantReminder                 AssistantReminder[]
  AssistantTask                     AssistantTask[]
  AuditLog                          AuditLog[]
  BackupExport                      BackupExport[]
  BackupSchedule                    BackupSchedule[]
  ChatConversation                  ChatConversation[]
  DepartmentManager                 Department[]               @relation("DepartmentManager")
  EmailCampaign                     EmailCampaign[]
  Form                              Form[]
  FormSubmission                    FormSubmission[]
  GitConfigHistory                  GitConfigHistory[]
  LoginHistory                      LoginHistory[]
  Media                             Media[]
  MenuItem_MenuItem_createdByToUser MenuItem[]                 @relation("MenuItem_createdByToUser")
  MenuItem_MenuItem_deletedByToUser MenuItem[]                 @relation("MenuItem_deletedByToUser")
  MenuItem_MenuItem_updatedByToUser MenuItem[]                 @relation("MenuItem_updatedByToUser")
  Page_Page_authorIdToUser          Page[]                     @relation("Page_authorIdToUser")
  Page_Page_createdByToUser         Page[]                     @relation("Page_createdByToUser")
  PasswordReset                     PasswordReset[]
  Post                              Post[]
  Session                           Session[]
  Survey                            Survey[]
  Tag                               Tag[]
  TeamLeader                        Team[]                     @relation("TeamLeader")
  TeamMember                        TeamMember[]
  TerminalAnalytics                 TerminalAnalytics[]
  TerminalLog                       TerminalLog[]
  TerminalSOPCreator                TerminalSOP[]              @relation("TerminalSOPCreator")
  TerminalSession                   TerminalSession[]
  TerminalShortcut                  TerminalShortcut[]
  ThemeConfig                       ThemeConfig[]
  User_User_createdByToUser         User?                      @relation("User_createdByToUser", fields: [createdBy], references: [id])
  other_User_User_createdByToUser   User[]                     @relation("User_createdByToUser")
  User_User_deletedByToUser         User?                      @relation("User_deletedByToUser", fields: [deletedBy], references: [id])
  other_User_User_deletedByToUser   User[]                     @relation("User_deletedByToUser")
  User_User_updatedByToUser         User?                      @relation("User_updatedByToUser", fields: [updatedBy], references: [id])
  other_User_User_updatedByToUser   User[]                     @relation("User_updatedByToUser")
  UserActivity                      UserActivity[]
  UserApiKey                        UserApiKey[]
  UserConfig                        UserConfig[]
  UserDepartment                    UserDepartment[]
  UserDevice                        UserDevice[]
  UserInvitation                    UserInvitation[]
  UserNotification                  UserNotification[]
  UserPreference                    UserPreference[]
  UserProfile                       UserProfile?
  UserRole                          UserRole[]
  WorkspaceTerminalCommands         WorkspaceTerminalCommand[]
  WorkspaceTerminalLogs             WorkspaceTerminalLog[]
  WorkspaceTerminalSessions         WorkspaceTerminalSession[]

  @@index([createdAt])
  @@index([email])
  @@index([isActive, deletedAt])
  @@index([username])
}

model UserInvitation {
  id         String    @id
  email      String
  role       String
  message    String?
  token      String    @unique
  status     String    @default("pending")
  expiresAt  DateTime
  acceptedAt DateTime?
  invitedBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  User       User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([expiresAt])
  @@index([status])
  @@index([token])
}

model UserRole {
  id         String    @id
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  Role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([isActive])
  @@index([roleId])
  @@index([userId])
}

model BackupExport {
  id             String    @id
  name           String
  type           String
  format         String
  status         String    @default("pending")
  filters        Json?
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  recordCount    Int?
  compression    Boolean   @default(false)
  encrypted      Boolean   @default(false)
  progress       Int       @default(0)
  error          String?
  metadata       Json?
  expiresAt      DateTime?
  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  completedAt    DateTime?
  User           User      @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([createdAt])
  @@index([status])
  @@index([type])
  @@index([expiresAt])
}

model BackupSchedule {
  id          String    @id
  name        String
  type        String
  frequency   String
  cronPattern String?
  isActive    Boolean   @default(true)
  filters     Json?
  settings    Json?
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  runCount    Int       @default(0)
  failCount   Int       @default(0)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User      @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([isActive])
  @@index([nextRunAt])
}

model MenuItem {
  id                            String    @id @default(uuid())
  menuId                        String
  label                         String
  url                           String
  type                          String
  target                        String    @default("_self")
  icon                          String?
  order                         Int       @default(0)
  parentId                      String?
  isActive                      Boolean   @default(true)
  createdAt                     DateTime  @default(now())
  createdBy                     String
  updatedAt                     DateTime  @updatedAt
  updatedBy                     String?
  deletedAt                     DateTime?
  deletedBy                     String?
  User_MenuItem_createdByToUser User      @relation("MenuItem_createdByToUser", fields: [createdBy], references: [id])
  User_MenuItem_deletedByToUser User?     @relation("MenuItem_deletedByToUser", fields: [deletedBy], references: [id])
  User_MenuItem_updatedByToUser User?     @relation("MenuItem_updatedByToUser", fields: [updatedBy], references: [id])

  @@index([menuId])
  @@index([parentId])
  @@index([isActive])
  @@index([order])
}

model AssistantFolder {
  id            String                  @id @default(uuid())
  userId        String
  name          String
  color         String?                 @default("#3B82F6")
  icon          String?                 @default("folder")
  order         Int                     @default(0)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  conversations AssistantConversation[]
  User          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

model AssistantConversation {
  id        String             @id @default(uuid())
  userId    String
  sessionId String
  title     String?
  folderId  String?
  isActive  Boolean            @default(true)
  startedAt DateTime           @default(now())
  endedAt   DateTime?
  metadata  Json?
  Folder    AssistantFolder?   @relation(fields: [folderId], references: [id])
  User      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  AssistantMessage[]

  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
  @@index([folderId])
  @@index([startedAt])
}

model AssistantMessage {
  id             String                @id @default(uuid())
  conversationId String
  content        String
  type           String
  metadata       Json?
  createdAt      DateTime              @default(now())
  conversation   AssistantConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

model AssistantTask {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([dueDate])
}

model AssistantReminder {
  id            String    @id @default(uuid())
  userId        String
  title         String
  description   String?
  time          DateTime
  recurring     Json?
  enabled       Boolean   @default(true)
  lastTriggered DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([time])
  @@index([enabled])
}

model AssistantNote {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  timezone      String    @default("UTC")
  language      String    @default("en")
  currency      String    @default("USD")
  newsletter    Boolean   @default(false)
  notifications Json?
  preferences   Json?
  socialLinks   Json?
  occupation    String?
  company       String?
  website       String?
  interests     String[]
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserDevice {
  id         String   @id @default(uuid())
  userId     String
  deviceId   String   @unique
  deviceType String
  deviceName String?
  platform   String?
  pushToken  String?
  lastActive DateTime @default(now())
  isActive   Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([lastActive])
}

model UserActivity {
  id         String   @id @default(uuid())
  userId     String
  action     String
  resource   String?
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  duration   Int?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model UserApiKey {
  id         String    @id @default(uuid())
  userId     String
  name       String
  key        String    @unique
  scopes     String[]
  lastUsed   DateTime?
  usageCount Int       @default(0)
  rateLimit  Int       @default(1000)
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@index([isActive])
}

model UserNotification {
  id        String    @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  sentAt    DateTime  @default(now())
  expiresAt DateTime?
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([sentAt])
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String
  category  String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
  @@index([userId])
  @@index([category])
}

model Department {
  id              String           @id @default(uuid())
  name            String           @unique
  code            String           @unique
  description     String?
  managerId       String?
  parentId        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Manager         User?            @relation("DepartmentManager", fields: [managerId], references: [id])
  Parent          Department?      @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  Children        Department[]     @relation("DepartmentHierarchy")
  UserDepartments UserDepartment[]

  @@index([managerId])
  @@index([parentId])
  @@index([code])
}

model UserDepartment {
  id           String     @id @default(uuid())
  userId       String
  departmentId String
  position     String?
  isPrimary    Boolean    @default(false)
  startDate    DateTime   @default(now())
  endDate      DateTime?
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  description String?
  leaderId    String?
  isActive    Boolean      @default(true)
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Leader      User?        @relation("TeamLeader", fields: [leaderId], references: [id])
  TeamMembers TeamMember[]

  @@index([leaderId])
  @@index([code])
}

model TeamMember {
  id       String    @id @default(uuid())
  teamId   String
  userId   String
  role     String    @default("member")
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  Team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Project {
  id                        String                     @id @default(uuid())
  name                      String
  description               String
  path                      String
  structure                 Json
  envVariables              Json                       @default("{}")
  scripts                   Json                       @default("[]")
  settings                  Json?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  assistantAnalytics        AssistantAnalytics[]
  assistantChatMessages     AssistantChatMessage[]
  assistantSessions         AssistantChatSession[]
  assistantCommands         AssistantCommand[]
  assistantFiles            AssistantFile[]
  gitConfig                 GitConfig?
  gitConfigHistory          GitConfigHistory[]
  commands                  TerminalCommand[]
  terminals                 TerminalSession[]
  workspaceTerminalCommands WorkspaceTerminalCommand[]
  workspaceTerminalLogs     WorkspaceTerminalLog[]
  workspaceTerminalSessions WorkspaceTerminalSession[]

  @@index([name])
  @@index([createdAt])
}

model TerminalSession {
  id          String            @id @default(uuid())
  projectId   String
  userId      String?
  type        String
  tabName     String
  active      Boolean           @default(true)
  output      Json              @default("[]")
  currentPath String
  pid         Int?
  metadata    Json?
  startedAt   DateTime          @default(now())
  endedAt     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  commands    TerminalCommand[]
  logs        TerminalLog[]
  Project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User        User?             @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([type])
  @@index([active])
  @@index([startedAt])
}

model TerminalCommand {
  id        String          @id @default(uuid())
  sessionId String
  projectId String
  command   String
  output    String
  exitCode  Int?
  timestamp DateTime        @default(now())
  Project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Session   TerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([projectId])
  @@index([timestamp])
}

model TerminalLog {
  id         String          @id @default(uuid())
  sessionId  String
  userId     String?
  type       String
  direction  String?
  content    String
  rawContent String?
  timestamp  DateTime        @default(now())
  sequence   Int
  metadata   Json?
  Session    TerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  User       User?           @relation(fields: [userId], references: [id])

  @@index([sessionId, sequence])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

model TerminalAnalytics {
  id               String   @id @default(uuid())
  userId           String?
  date             DateTime @db.Date
  commandCount     Int      @default(0)
  errorCount       Int      @default(0)
  sessionCount     Int      @default(0)
  totalDuration    Int      @default(0)
  uniqueCommands   Json
  commonPatterns   Json
  errorPatterns    Json
  workflowPatterns Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User?    @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model TerminalCommandPattern {
  id           String   @id @default(uuid())
  pattern      String   @unique
  name         String
  description  String?
  category     String
  frequency    Int      @default(0)
  avgDuration  Int?
  successRate  Float?
  suggestedSop Json?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@index([frequency])
}

model TerminalShortcut {
  id          String   @id @default(uuid())
  userId      String?
  alias       String
  command     String
  description String?
  category    String?
  usageCount  Int      @default(0)
  isGlobal    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, alias])
  @@index([userId])
  @@index([isGlobal])
}

model TerminalSOP {
  id          String   @id @default(uuid())
  title       String
  description String?
  workflow    Json
  triggers    Json
  category    String
  tags        String[]
  usageCount  Int      @default(0)
  successRate Float?
  avgDuration Int?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation("TerminalSOPCreator", fields: [createdBy], references: [id])

  @@index([category])
  @@index([isActive])
  @@index([createdBy])
}

model ApiToken {
  id            String        @id @default(uuid())
  userId        String
  name          String
  token         String        @unique
  tokenPrefix   String
  scopes        String[]
  expiresAt     DateTime?
  lastUsedAt    DateTime?
  lastUsedIp    String?
  usageCount    Int           @default(0)
  rateLimit     Int           @default(1000)
  isActive      Boolean       @default(true)
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  revokedAt     DateTime?
  revokedReason String?
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ApiUsageLog   ApiUsageLog[]

  @@index([userId])
  @@index([token])
  @@index([isActive])
  @@index([expiresAt])
}

model ApiUsageLog {
  id           String   @id @default(uuid())
  tokenId      String
  userId       String
  endpoint     String
  method       String
  statusCode   Int
  requestBody  Json?
  responseBody Json?
  responseTime Int
  ipAddress    String
  userAgent    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime @default(now())
  ApiToken     ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([userId])
  @@index([endpoint])
  @@index([createdAt])
  @@index([statusCode])
}

model ApiRateLimit {
  id           String   @id @default(uuid())
  tokenId      String   @unique
  windowStart  DateTime
  requestCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenId])
  @@index([windowStart])
}

model ApiWebhook {
  id              String    @id @default(uuid())
  userId          String
  name            String
  url             String
  events          String[]
  secret          String
  isActive        Boolean   @default(true)
  failureCount    Int       @default(0)
  lastTriggeredAt DateTime?
  lastStatus      Int?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

model UserConfig {
  id        String   @id @default(uuid())
  userId    String
  key       String
  value     Json
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
  @@index([category])
}

model AssistantChatSession {
  id              String                 @id @default(uuid())
  userId          String
  projectId       String?
  sessionName     String?
  model           String
  temperature     Float                  @default(0.7)
  maxTokens       Int                    @default(4096)
  totalTokensUsed Int                    @default(0)
  totalCost       Float                  @default(0)
  metadata        Json?
  startedAt       DateTime               @default(now())
  lastActiveAt    DateTime               @updatedAt
  endedAt         DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  analytics       AssistantAnalytics[]
  messages        AssistantChatMessage[]
  Project         Project?               @relation(fields: [projectId], references: [id])
  User            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  commands        AssistantCommand[]
  files           AssistantFile[]

  @@index([userId])
  @@index([projectId])
  @@index([lastActiveAt])
}

model AssistantChatMessage {
  id         String               @id @default(uuid())
  sessionId  String
  userId     String?
  projectId  String?
  role       String
  content    String
  model      String?
  tokensUsed Int?
  cost       Float?
  latency    Int?
  metadata   Json?
  timestamp  DateTime             @default(now())
  Project    Project?             @relation(fields: [projectId], references: [id])
  Session    AssistantChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  User       User?                @relation(fields: [userId], references: [id])

  @@index([sessionId, timestamp])
  @@index([userId])
  @@index([projectId])
  @@index([role])
}

model AssistantCommand {
  id         String               @id @default(uuid())
  sessionId  String
  messageId  String?
  projectId  String?
  command    String
  type       String
  status     String
  output     String?
  error      String?
  executedAt DateTime?
  executedBy String?
  metadata   Json?
  createdAt  DateTime             @default(now())
  Project    Project?             @relation(fields: [projectId], references: [id])
  Session    AssistantChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([projectId])
  @@index([status])
  @@index([type])
}

model AssistantFile {
  id        String               @id @default(uuid())
  sessionId String
  projectId String?
  filePath  String
  action    String
  content   String?
  diff      String?
  metadata  Json?
  timestamp DateTime             @default(now())
  Project   Project?             @relation(fields: [projectId], references: [id])
  Session   AssistantChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([projectId])
  @@index([action])
  @@index([timestamp])
}

model AssistantAnalytics {
  id            String                @id @default(uuid())
  sessionId     String?
  userId        String
  projectId     String?
  date          DateTime              @db.Date
  messagesCount Int                   @default(0)
  tokensUsed    Int                   @default(0)
  totalCost     Float                 @default(0)
  commandsCount Int                   @default(0)
  filesModified Int                   @default(0)
  errorsCount   Int                   @default(0)
  avgLatency    Float?
  metadata      Json?
  createdAt     DateTime              @default(now())
  Project       Project?              @relation(fields: [projectId], references: [id])
  Session       AssistantChatSession? @relation(fields: [sessionId], references: [id])
  User          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, date])
  @@index([userId])
  @@index([projectId])
  @@index([date])
}

model WorkspaceTerminalSession {
  id          String                     @id @default(uuid())
  projectId   String
  workspaceId String?
  userId      String
  type        String
  tabName     String
  active      Boolean                    @default(true)
  currentPath String
  environment Json?
  pid         Int?
  metadata    Json?
  startedAt   DateTime                   @default(now())
  endedAt     DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  commands    WorkspaceTerminalCommand[]
  logs        WorkspaceTerminalLog[]
  Project     Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User        User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([workspaceId])
  @@index([userId])
  @@index([active])
  @@index([startedAt])
}

model WorkspaceTerminalCommand {
  id          String                   @id @default(uuid())
  sessionId   String
  projectId   String
  userId      String
  command     String
  workingDir  String
  output      String?
  errorOutput String?
  exitCode    Int?
  duration    Int?
  timestamp   DateTime                 @default(now())
  Project     Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Session     WorkspaceTerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  User        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([projectId])
  @@index([userId])
  @@index([timestamp])
}

model WorkspaceTerminalLog {
  id         String                   @id @default(uuid())
  sessionId  String
  projectId  String
  userId     String
  type       String
  content    String
  rawContent String?
  sequence   Int
  timestamp  DateTime                 @default(now())
  Project    Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Session    WorkspaceTerminalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  User       User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId, sequence])
  @@index([projectId])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

model GitConfig {
  id            String             @id @default(cuid())
  projectId     String             @unique
  projectPath   String
  repoName      String
  isGitRepo     Boolean
  isBare        Boolean
  workingDir    String
  currentBranch String
  defaultBranch String
  isClean       Boolean
  ahead         Int                @default(0)
  behind        Int                @default(0)
  staged        Int                @default(0)
  modified      Int                @default(0)
  untracked     Int                @default(0)
  userName      String?
  userEmail     String?
  remotes       Json
  branches      Json
  config        Json
  gitVersion    String?
  lastFetch     DateTime?
  syncedAt      DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Project       Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  history       GitConfigHistory[]

  @@index([projectId])
  @@index([syncedAt])
}

model GitConfigHistory {
  id         String    @id @default(cuid())
  configId   String
  projectId  String
  changeType String
  fromValue  String?
  toValue    String?
  details    Json?
  userId     String?
  timestamp  DateTime  @default(now())
  GitConfig  GitConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  Project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User       User?     @relation(fields: [userId], references: [id])

  @@index([configId])
  @@index([projectId])
  @@index([userId])
  @@index([timestamp])
}
