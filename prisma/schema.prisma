generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id
  email               String          @unique
  username            String          @unique
  passwordHash        String
  firstName           String?
  lastName            String?
  displayName         String?
  avatar              String?
  bio                 String?
  phone               String?
  isActive            Boolean         @default(true)
  emailVerified       DateTime?
  phoneVerified       DateTime?
  mfaEnabled          Boolean         @default(false)
  mfaSecret           String?
  failedLoginAttempts Int             @default(0)
  lastLoginAt         DateTime?
  lastLoginIp         String?
  accountLockedUntil  DateTime?
  passwordChangedAt   DateTime        @default(now())
  mustChangePassword  Boolean         @default(false)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  createdBy           String?
  updatedBy           String?
  deletedAt           DateTime?
  deletedBy           String?
  version             Int             @default(1)
  AuditLog            AuditLog[]
  LoginHistory        LoginHistory[]
  PasswordReset       PasswordReset[]
  Session             Session[]
  UserActivity        UserActivity[]
  UserProfile         UserProfile?
  UserRole            UserRole[]
  // Portfolio relations
  Portfolios          Portfolio[]
  Watchlists          Watchlist[]

  @@index([email])
  @@index([username])
  @@index([isActive, deletedAt])
  @@index([createdAt])
}

model Role {
  id             String           @id
  name           String           @unique
  code           String           @unique
  description    String?
  level          Int              @default(0)
  isSystemRole   Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      String?
  updatedBy      String?
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@index([code])
  @@index([isActive])
}

model UserRole {
  id         String    @id
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  Role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

model Permission {
  id             String           @id
  code           String           @unique
  name           String
  description    String?
  resource       String
  action         String
  scope          String           @default("global")
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]

  @@unique([resource, action, scope])
  @@index([code])
  @@index([isActive])
  @@index([resource])
}

model RolePermission {
  id           String     @id
  roleId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  timezone      String    @default("UTC")
  language      String    @default("en")
  currency      String    @default("USD")
  newsletter    Boolean   @default(false)
  notifications Json?
  preferences   Json?
  socialLinks   Json?
  occupation    String?
  company       String?
  website       String?
  interests     String[]
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model LoginHistory {
  id            String   @id
  userId        String
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model PasswordReset {
  id        String    @id
  token     String    @unique
  userId    String
  expires   DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expires])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  severity   String   @default("info")
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model UserActivity {
  id         String   @id @default(uuid())
  userId     String
  action     String
  resource   String?
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  duration   Int?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model holdings {
  id           String         @id
  portfolioId  String
  symbol       String
  quantity     Decimal
  averagePrice Decimal
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  portfolios   portfolios     @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions transactions[]

  @@unique([portfolioId, symbol])
  @@index([portfolioId])
  @@index([symbol])
}

model portfolio_snapshots {
  id                 String     @id
  portfolioId        String
  totalValue         Decimal
  totalCost          Decimal
  dayChange          Decimal
  dayChangePercent   Decimal
  totalReturn        Decimal
  totalReturnPercent Decimal
  timestamp          DateTime   @default(now())
  portfolios         portfolios @relation(fields: [portfolioId], references: [id])

  @@index([portfolioId])
  @@index([timestamp])
}

model portfolios {
  id                  String                @id
  userId              String
  name                String
  description         String?
  currency            String                @default("USD")
  isDefault           Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  holdings            holdings[]
  portfolio_snapshots portfolio_snapshots[]
  transactions        transactions[]
  watchlists          watchlists[]

  @@index([userId])
}

model stock_prices {
  id            String   @id
  stockId       String
  symbol        String
  price         Decimal
  open          Decimal?
  high          Decimal?
  low           Decimal?
  close         Decimal?
  volume        BigInt?
  change        Decimal?
  changePercent Decimal?
  timestamp     DateTime @default(now())
  stocks        stocks   @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([stockId])
  @@index([symbol])
  @@index([timestamp])
}

// Market Data Models
model market_quotes {
  id             String   @id @default(uuid())
  symbol         String
  price          Float
  open           Float?
  high           Float?
  low            Float?
  close          Float?
  previousClose  Float?
  volume         BigInt?
  change         Float?
  changePercent  Float?
  marketCap      BigInt?
  delaySeconds   Int?
  timestamp      DateTime
  source         String   @default("polygon")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([symbol, timestamp])
}

model api_usage_tracking {
  id                  String   @id @default(uuid())
  userId              String?
  endpoint            String
  method              String
  statusCode          Int      @default(200)
  responseTime        Int
  cacheHit            Boolean  @default(false)
  apiCallsUsed        Int      @default(1)
  rateLimitRemaining  Int?
  timestamp           DateTime @default(now())
  apiProvider         String   @default("polygon")
  credits             Int      @default(1)

  @@index([userId, timestamp])
  @@index([endpoint, timestamp])
}

// Enhanced Stock Master Data
model StockMaster {
  id                    String          @id @default(cuid())
  symbol                String
  name                  String
  exchange              String
  market                String          // Market enum as string (SET, NYSE, NASDAQ, etc.)
  country               String          @default("US")
  currency              String          @default("USD")
  sector                String?
  industry              String?
  description           String?
  website               String?
  logo                  String?
  employees             Int?
  marketCap             Decimal?        @db.Decimal(20, 2)
  sharesOutstanding     Decimal?        @db.Decimal(20, 2)
  peRatio               Decimal?        @db.Decimal(10, 4)
  eps                   Decimal?        @db.Decimal(10, 4)
  beta                  Decimal?        @db.Decimal(8, 4)
  dividendYield         Decimal?        @db.Decimal(8, 4)
  fiftyTwoWeekHigh      Decimal?        @db.Decimal(10, 4)
  fiftyTwoWeekLow       Decimal?        @db.Decimal(10, 4)
  avgVolume             Decimal?        @db.Decimal(20, 2)
  isActive              Boolean         @default(true)
  isDelisted            Boolean         @default(false)
  delistedDate          DateTime?
  ipoDate               DateTime?
  fiscalYearEnd         String?         // MM-DD format
  lastUpdated           DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  createdBy             String?
  updatedBy             String?

  // Relations
  prices                StockPriceHistory[]
  realtimePrice         StockRealTimePrice?
  portfolioPositions    PortfolioPosition[]
  trades                Trade[]
  watchlistItems        WatchlistItem[]

  @@unique([symbol, market])
  @@index([symbol])
  @@index([market])
  @@index([country])
  @@index([sector])
  @@index([isActive])
  @@index([marketCap])
  @@map("stock_master")
}

model StockPriceHistory {
  id                    String          @id @default(cuid())
  stockId               String
  symbol                String          // Denormalized for performance
  date                  DateTime        @db.Date
  open                  Decimal         @db.Decimal(10, 4)
  high                  Decimal         @db.Decimal(10, 4)
  low                   Decimal         @db.Decimal(10, 4)
  close                 Decimal         @db.Decimal(10, 4)
  adjustedClose         Decimal         @db.Decimal(10, 4)
  volume                Decimal         @db.Decimal(20, 2)
  change                Decimal?        @db.Decimal(10, 4)
  changePercent         Decimal?        @db.Decimal(8, 4)
  source                String          @default("YAHOO") // YAHOO, POLYGON, ALPHA_VANTAGE, etc.
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  stock                 StockMaster     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([stockId, date])
  @@index([symbol, date])
  @@index([date])
  @@index([source])
  @@map("stock_price_history")
}

model StockRealTimePrice {
  id                    String          @id @default(cuid())
  stockId               String          @unique
  symbol                String          // Denormalized for performance
  price                 Decimal         @db.Decimal(10, 4)
  change                Decimal         @db.Decimal(10, 4)
  changePercent         Decimal         @db.Decimal(8, 4)
  volume                Decimal         @db.Decimal(20, 2)
  high                  Decimal         @db.Decimal(10, 4)
  low                   Decimal         @db.Decimal(10, 4)
  open                  Decimal         @db.Decimal(10, 4)
  previousClose         Decimal         @db.Decimal(10, 4)
  marketCap             Decimal?        @db.Decimal(20, 2)
  timestamp             DateTime
  source                String          @default("YAHOO")
  isMarketOpen          Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  stock                 StockMaster     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([symbol])
  @@index([timestamp])
  @@map("stock_realtime_prices")
}

model Portfolio {
  id                    String          @id @default(cuid())
  userId                String
  name                  String
  description           String?
  currency              String          @default("USD")
  baseCurrency          String          @default("USD") // For multi-currency portfolios
  isDefault             Boolean         @default(false)
  isActive              Boolean         @default(true)
  totalValue            Decimal         @default(0) @db.Decimal(20, 2)
  totalCost             Decimal         @default(0) @db.Decimal(20, 2)
  totalGainLoss         Decimal         @default(0) @db.Decimal(20, 2)
  totalGainLossPercent  Decimal         @default(0) @db.Decimal(8, 4)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  createdBy             String?
  updatedBy             String?

  // Relations
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  positions             PortfolioPosition[]
  trades                Trade[]
  performance           PortfolioPerformance[]

  @@index([userId])
  @@index([isActive])
  @@index([isDefault])
  @@map("portfolios_v2")
}

model PortfolioPosition {
  id                    String          @id @default(cuid())
  portfolioId           String
  stockId               String
  symbol                String          // Denormalized
  quantity              Decimal         @db.Decimal(20, 8)
  averageCost           Decimal         @db.Decimal(10, 4)
  currentPrice          Decimal         @db.Decimal(10, 4)
  marketValue           Decimal         @db.Decimal(20, 2)
  unrealizedGainLoss    Decimal         @db.Decimal(20, 2)
  unrealizedGainLossPercent Decimal     @db.Decimal(8, 4)
  realizedGainLoss      Decimal         @default(0) @db.Decimal(20, 2)
  weight                Decimal         @db.Decimal(8, 4)
  lastPriceUpdate       DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  portfolio             Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock                 StockMaster     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, stockId])
  @@index([portfolioId])
  @@index([stockId])
  @@map("portfolio_positions_v2")
}

model Trade {
  id                    String          @id @default(cuid())
  portfolioId           String
  stockId               String
  symbol                String          // Denormalized
  market                String          // Market (SET, NYSE, etc.)
  type                  String          // BUY, SELL, TRANSFER_IN, TRANSFER_OUT
  quantity              Decimal         @db.Decimal(20, 8)
  price                 Decimal         @db.Decimal(10, 4)
  totalAmount           Decimal         @db.Decimal(20, 2)
  fees                  Decimal         @default(0) @db.Decimal(10, 4)
  tax                   Decimal         @default(0) @db.Decimal(10, 4)
  notes                 String?
  status                String          @default("EXECUTED") // PENDING, EXECUTED, CANCELLED, FAILED
  executedAt            DateTime
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  createdBy             String?

  // Relations
  portfolio             Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock                 StockMaster     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([stockId])
  @@index([market])
  @@index([type])
  @@index([executedAt])
  @@index([status])
  @@map("trades_v2")
}

model PortfolioPerformance {
  id                    String          @id @default(cuid())
  portfolioId           String
  date                  DateTime        @db.Date
  totalValue            Decimal         @db.Decimal(20, 2)
  totalCost             Decimal         @db.Decimal(20, 2)
  dayReturn             Decimal         @db.Decimal(20, 2)
  dayReturnPercent      Decimal         @db.Decimal(8, 4)
  totalReturn           Decimal         @db.Decimal(20, 2)
  totalReturnPercent    Decimal         @db.Decimal(8, 4)
  createdAt             DateTime        @default(now())

  // Relations
  portfolio             Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, date])
  @@index([portfolioId])
  @@index([date])
  @@map("portfolio_performance_v2")
}

model Watchlist {
  id                    String          @id @default(cuid())
  userId                String
  name                  String
  description           String?
  isDefault             Boolean         @default(false)
  isActive              Boolean         @default(true)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                 WatchlistItem[]

  @@index([userId])
  @@index([isActive])
  @@map("watchlists_v2")
}

model WatchlistItem {
  id                    String          @id @default(cuid())
  watchlistId           String
  stockId               String
  symbol                String          // Denormalized
  sortOrder             Int             @default(0)
  notes                 String?
  createdAt             DateTime        @default(now())

  // Relations
  watchlist             Watchlist       @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  stock                 StockMaster     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, stockId])
  @@index([watchlistId])
  @@index([stockId])
  @@map("watchlist_items_v2")
}

// Legacy stocks model (keep for backward compatibility)
model stocks {
  id           String         @id
  symbol       String         @unique
  name         String
  exchange     String?
  sector       String?
  industry     String?
  marketCap    Decimal?
  description  String?
  website      String?
  lastUpdated  DateTime       @default(now())
  stock_prices stock_prices[]

  @@index([symbol])
}

model transactions {
  id          String          @id
  portfolioId String
  holdingId   String?
  type        TransactionType
  symbol      String
  quantity    Decimal
  price       Decimal
  fees        Decimal         @default(0)
  total       Decimal
  notes       String?
  executedAt  DateTime        @default(now())
  createdAt   DateTime        @default(now())
  holdings    holdings?       @relation(fields: [holdingId], references: [id])
  portfolios  portfolios      @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([executedAt])
  @@index([portfolioId])
  @@index([symbol])
}

model watchlists {
  id          String     @id
  portfolioId String
  userId      String
  name        String
  symbols     String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  portfolios  portfolios @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([userId])
}

enum TransactionType {
  BUY
  SELL
  DIVIDEND
  SPLIT
  TRANSFER_IN
  TRANSFER_OUT
}
